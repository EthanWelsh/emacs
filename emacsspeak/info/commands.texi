@c $Id: commands.texi 8575 2013-11-24 02:06:18Z tv.raman.tv $
@node Emacspeak Commands
@chapter Emacspeak Commands

This chapter is generated automatically from the source-level documentation.
Any errors or corrections should be made to the source-level
documentation.
This chapter documents a total of 926 commands.

@menu
* cd-tool::
* dectalk-voices::
* dtk-speak::
* dtk-unicode::
* emacspeak-alsaplayer::
* emacspeak-amark::
* emacspeak-arc::
* emacspeak-aumix::
* emacspeak-bookshare::
* emacspeak-bs::
* emacspeak-buff-menu::
* emacspeak-c::
* emacspeak-calendar::
* emacspeak-compile::
* emacspeak-custom::
* emacspeak-daisy::
* emacspeak-dired::
* emacspeak-ecb::
* emacspeak-ediff::
* emacspeak-enriched::
* emacspeak-entertain::
* emacspeak-eperiodic::
* emacspeak-epub::
* emacspeak-erc::
* emacspeak-eterm::
* emacspeak-filtertext::
* emacspeak-fix-interactive::
* emacspeak-forms::
* emacspeak-gnus::
* emacspeak-gomoku::
* emacspeak-google::
* emacspeak-gridtext::
* emacspeak-hide::
* emacspeak-ibuffer::
* emacspeak-imenu::
* emacspeak-info::
* emacspeak-jabber::
* emacspeak-keymap::
* emacspeak-librivox::
* emacspeak-loaddefs::
* emacspeak-m-player::
* emacspeak-madplay::
* emacspeak-man::
* emacspeak-npr::
* emacspeak-ocr::
* emacspeak-outline::
* emacspeak-pianobar::
* emacspeak-pronounce::
* emacspeak-redefine::
* emacspeak-remote::
* emacspeak-rmail::
* emacspeak-solitaire::
* emacspeak-sounds::
* emacspeak-speak::
* emacspeak-speedbar::
* emacspeak-sudoku::
* emacspeak-table-ui::
* emacspeak-tabulate::
* emacspeak-tapestry::
* emacspeak-tar::
* emacspeak-tetris::
* emacspeak-tnt::
* emacspeak-url-template::
* emacspeak-view::
* emacspeak-vm::
* emacspeak-w3::
* emacspeak-w3m::
* emacspeak-we::
* emacspeak-websearch::
* emacspeak-webspace::
* emacspeak-webutils::
* emacspeak-widget::
* emacspeak-wizards::
* emacspeak-xml-shell::
* emacspeak-xslt::
* emacspeak-zinf::
* emacspeak::
* voice-setup::
* emacspeak-w3search::
* emacspeak-org::
* URL Templates ::
@end menu

@node cd-tool
@section cd-tool

Commentary:
Provide an emacs front-end to cdtool.
cdtool can be obtained as an rpm
check using rpmfind
or from its home site at
  sunsite.unc.edu /pub/Linux/apps/sound/cdrom/cli
This module also provides the ability to play or save
clips from a CD if you have cdda2wav installed.
cdda2wav is a cd to wav convertor.

Automatically generated documentation
for commands defined in module  cd-tool.

@deffn {Interactive Command} cd-tool nil
@kbd{ control e DEL }

Front-end to CDTool.
Bind this function to a convenient key-
Emacspeak users automatically have
this bound to <DEL> in the emacspeak keymap.

Key     Action
---     ------

+       Next Track
-       Previous Track
SPC     Pause or Resume
e       Eject
=       Shuffle
i       CD Info
p       Play
s       Stop
t       track
c       clip
cap C   Save clip to disk

@end deffn

@node dectalk-voices
@section dectalk-voices

Commentary:
This module defines the various voices used in voice-lock mode.
This module is Dectalk specific.

Automatically generated documentation
for commands defined in module  dectalk-voices.

@deffn {Interactive Command} dtk-exp nil
@kbd{Not bound to any key.}

Select Dectalk TTS server.
@end deffn

@node dtk-speak
@section dtk-speak

Commentary:
Defines the TTS interface.

Automatically generated documentation
for commands defined in module  dtk-speak.

@deffn {Interactive Command} dtk-add-cleanup-pattern nil
@kbd{ control e d a }

Add this pattern to the list of repeating patterns that
are cleaned up.  Optional interactive prefix arg deletes
this pattern if previously added.  Cleaning up repeated
patterns results in emacspeak speaking the pattern followed
by a repeat count instead of speaking all the characters
making up the pattern.  Thus, by adding the repeating
pattern `.' (this is already added by default) emacspeak
will say ``aw fifteen dot'' when speaking the string
``...............'' instead of ``period period period period
''
@end deffn

@deffn {Interactive Command} dtk-async-server nil
@kbd{ control e d  cap A  }

Select and start an async  speech server interactively.
Async servers allow external programs like self-voicing Web browsers to use
the Emacspeak TTS server abstraction.
Argument PROGRAM specifies the speech server program.
@end deffn

@deffn {Interactive Command} dtk-local-server nil
@kbd{ control e d  cap L  }

Select and start an local  speech server interactively.
Local server lets Emacspeak on a remote host connect back via SSH  port forwarding for instance.
Argument PROGRAM specifies the speech server program.
Port  defaults to  dtk-local-server-port
@end deffn

@deffn {Interactive Command} dtk-pause nil
@kbd{Not bound to any key.}

Temporarily pause / resume speech.
@end deffn

@deffn {Interactive Command} dtk-reset-state nil
@kbd{ control e d  cap R  }

Restore sanity to the Dectalk.
Typically used after the Dectalk has been power   cycled.
@end deffn

@deffn {Interactive Command} dtk-resume nil
@kbd{Not bound to any key.}

Resume paused speech.
This command resumes  speech that has been suspended by executing
command `dtk-pause' bound to M-x dtk-pause.
If speech has not been paused,
and option `dtk-resume-should-toggle' is set,
 then this command will pause ongoing speech.
@end deffn

@deffn {Interactive Command} dtk-select-server nil
@kbd{ control e d d }

Select a speech server interactively.
Argument PROGRAM specifies the speech server program. When called
interactively, The selected server is started
immediately. Optional arg device sets up environment variable
ALSA_DEFAULT to specified device before starting the server.
@end deffn

@deffn {Interactive Command} dtk-set-character-scale nil
@kbd{ control e d f }

Set scale FACTOR for   speech rate.
Speech rate is scaled by this factor
when speaking characters.
Interactive PREFIX arg means set   the global default value, and then set the
current local  value to the result.
@end deffn

@deffn {Interactive Command} dtk-set-chunk-separator-syntax nil
@kbd{ control e d RETURN }

Interactively set how text is split in chunks.
See the Emacs documentation on syntax tables for details on how characters are
classified into various syntactic classes.
Argument S specifies the syntax class.
@end deffn

@deffn {Interactive Command} dtk-set-language nil
@kbd{ control e d  cap S  }

Set language according to the argument lang.
@end deffn

@deffn {Interactive Command} dtk-set-next-language nil
@kbd{ control e d  cap N  }

Switch to the next available language
@end deffn

@deffn {Interactive Command} dtk-set-predefined-speech-rate nil
@kbd{ control e d 9   control e d 8   control e d 7   control e d 6   control e d 5   control e d 4   control e d 3   control e d 2   control e d 1   control e d 0 }

Set speech rate to one of nine predefined levels.
Interactive PREFIX arg says to set the rate globally.
Formula used is:
rate = dtk-speech-rate-base + dtk-speech-rate-step * level.
@end deffn

@deffn {Interactive Command} dtk-set-preferred-language nil
@kbd{Not bound to any key.}

Set the alias of the preferred language:
For example if alias="en" lang="en_GB",
then the following call:
 dtk-set-language("en")
will set "en_GB".

@end deffn

@deffn {Interactive Command} dtk-set-previous-language nil
@kbd{ control e d  cap P  }

Switch to the previous available language
@end deffn

@deffn {Interactive Command} dtk-set-punctuations nil
@kbd{ control e d p }

Set punctuation mode to MODE.
Possible values are `some', `all', or `none'.
Interactive PREFIX arg means set   the global default value, and then set the
current local  value to the result.
@end deffn

@deffn {Interactive Command} dtk-set-punctuations-to-all nil
@kbd{Not bound to any key.}

Set punctuation  mode to all.
Interactive PREFIX arg sets punctuation mode globally.
@end deffn

@deffn {Interactive Command} dtk-set-punctuations-to-some nil
@kbd{Not bound to any key.}

Set punctuation  mode to some.
Interactive PREFIX arg sets punctuation mode globally.
@end deffn

@deffn {Interactive Command} dtk-set-rate nil
@kbd{ control e d r }

Set speaking RATE for the tts.
Interactive PREFIX arg means set   the global default value, and then set the
current local  value to the result.
@end deffn

@deffn {Interactive Command} dtk-stop nil
@kbd{ control e s }

Stop speech now.
@end deffn

@deffn {Interactive Command} dtk-toggle-allcaps-beep nil
@kbd{ control e d  cap C  }

Toggle allcaps-beep.
when set, allcaps words  are  indicated by a
short beep.  Interactive PREFIX arg means toggle the global default
value, and then set the current local value to the result.
Note that allcaps-beep is a very useful thing when programming.
However it is irritating to have it on when reading documents.
@end deffn

@deffn {Interactive Command} dtk-toggle-capitalization nil
@kbd{ control e d c }

Toggle capitalization.
when set, capitalization is indicated by a
short beep.  Interactive PREFIX arg means toggle the global default
value, and then set the current local value to the result.
@end deffn

@deffn {Interactive Command} dtk-toggle-debug nil
@kbd{ control e d b }

Toggle state of the debug FLAG.
When debugging is on, you can switch to the buffer
*speaker* to examine the output from the process
that talks to the speech device by using command C-e d C-M-b.
Note: *speaker* is a hidden buffer, ie it has a leading space in its name.
@end deffn

@deffn {Interactive Command} dtk-toggle-punctuation-mode nil
@kbd{ control e d , }

Toggle punctuation mode between "some" and "all".
Interactive PREFIX arg makes the new setting global.
@end deffn

@deffn {Interactive Command} dtk-toggle-quiet nil
@kbd{ control e d q }

Toggles state of  dtk-quiet.
Turning on this switch silences speech.
Optional interactive prefix arg causes this setting to become global.
@end deffn

@deffn {Interactive Command} dtk-toggle-speak-nonprinting-chars nil
@kbd{ control e d n }

Toggle speak-nonprinting-chars.
Switches behavior of how characters with the high bit set are handled.
Interactive PREFIX arg means toggle the global default
value, and then set the current local value to the result.
@end deffn

@deffn {Interactive Command} dtk-toggle-split-caps nil
@kbd{ control e d s }

Toggle split caps mode.
Split caps mode is useful when reading
Hungarian notation in program source code.  Interactive PREFIX arg
means toggle the global default value, and then set the current local
value to the result.
@end deffn

@deffn {Interactive Command} dtk-toggle-splitting-on-white-space nil
@kbd{ control e d SPACE }

Toggle splitting of speech on white space.
This affects the internal state of emacspeak that decides if we split
text purely by clause boundaries, or also include
whitespace.  By default, emacspeak sends a clause at a time
to the speech device.  This produces fluent speech for
normal use.  However in modes such as `shell-mode' and some
programming language modes, clause markers appear
infrequently, and this can result in large amounts of text
being sent to the speech device at once, making the system
unresponsive when asked to stop talking.  Splitting on white
space makes emacspeak's stop command responsive.  However,
when splitting on white space, the speech sounds choppy
since the synthesizer is getting a word at a time.
@end deffn

@deffn {Interactive Command} dtk-toggle-strip-octals nil
@kbd{ control e d o }

Toggle stripping of octals.
Interactive prefix arg means
 toggle the global default value, and then set the current local
value to the result.
@end deffn

@node dtk-unicode
@section dtk-unicode

Commentary:

This  Provides Unicode support to the speech layer.

Automatically generated documentation
for commands defined in module  dtk-unicode.

@deffn {Interactive Command} dtk-unicode-customize-char nil
@kbd{Not bound to any key.}

Add a custom replacement string for CHAR.

When called interactively, CHAR defaults to the character after point.
@end deffn

@deffn {Interactive Command} dtk-unicode-uncustomize-char nil
@kbd{Not bound to any key.}

Delete custom replacement for CHAR.

When called interactively, CHAR defaults to the character after point.
@end deffn

@node emacspeak-alsaplayer
@section emacspeak-alsaplayer

Commentary:
Defines a simple derived mode for interacting with
alsaplayer.
alsaplayer navigation commands  work via single keystrokes.

Automatically generated documentation
for commands defined in module  emacspeak-alsaplayer.

@deffn {Interactive Command} emacspeak-alsaplayer-add-to-queue nil
@kbd{Not bound to any key.}

Add specified resource to queue.
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-amark-add nil
@kbd{Not bound to any key.}

Set AMark `name' at current position in current audio stream.
Interactive prefix arg prompts for position.
As the default, use current position.
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-amark-jump nil
@kbd{Not bound to any key.}

Jump to specified AMark.
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-backward-10-seconds nil
@kbd{Not bound to any key.}

Skip backward by  10 seconds.
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-backward-minute nil
@kbd{Not bound to any key.}

Skip backwards by  minutes.
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-backward-ten-minutes nil
@kbd{Not bound to any key.}

Skip backwards by  chunks of minutes.
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-cd nil
@kbd{Not bound to any key.}

Change default directory, and silence its pronunciation.
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-clear nil
@kbd{Not bound to any key.}

Clear or resume alsaplayer
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-clip nil
@kbd{Not bound to any key.}

Invoke mp3splt to clip selected range.
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-find-and-add-to-queue nil
@kbd{Not bound to any key.}

Find  specified resource and add to queue.
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-forward-10-seconds nil
@kbd{Not bound to any key.}

Skip forward by  seconds.
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-forward-minute nil
@kbd{Not bound to any key.}

Skip forward by  minutes.
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-forward-ten-minutes nil
@kbd{Not bound to any key.}

Skip forward by  chunks of ten minutes.
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-info nil
@kbd{Not bound to any key.}

Speak current path and copy it to kill ring.
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-jump nil
@kbd{Not bound to any key.}

Jump to specified track.
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-launch nil
@kbd{Not bound to any key.}

Launch Alsaplayer.
user is placed in a buffer associated with the newly created
Alsaplayer session.
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-mark-position nil
@kbd{Not bound to any key.}

Mark currently displayed position.
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-mode nil
@kbd{Not bound to any key.}

Major mode for alsaplayer interaction. 

key             binding
---             -------

ESC		Prefix Command
SPC		emacspeak-alsaplayer-pause
,		emacspeak-alsaplayer-backward-10-seconds
.		emacspeak-alsaplayer-forward-10-seconds
/		emacspeak-alsaplayer-speed
<		emacspeak-alsaplayer-backward-minute
>		emacspeak-alsaplayer-forward-minute
?		emacspeak-alsaplayer-status
A		emacspeak-alsaplayer-replace-queue
J		emacspeak-alsaplayer-amark-jump
M		emacspeak-alsaplayer-amark-add
Q		emacspeak-alsaplayer-quit
S		emacspeak-alsaplayer-stop
[		emacspeak-alsaplayer-backward-ten-minutes
]		emacspeak-alsaplayer-forward-ten-minutes
a		emacspeak-alsaplayer-add-to-queue
c		emacspeak-alsaplayer-clear
d		emacspeak-alsaplayer-cd
f		emacspeak-alsaplayer-find-and-add-to-queue
g		emacspeak-alsaplayer-seek
i		emacspeak-alsaplayer-info
j		emacspeak-alsaplayer-jump
l		emacspeak-alsaplayer-launch
m		emacspeak-alsaplayer-mark-position
n		emacspeak-alsaplayer-next
o		other-window
p		emacspeak-alsaplayer-previous
q		bury-buffer
r		emacspeak-alsaplayer-relative
s		emacspeak-alsaplayer-start
v		emacspeak-alsaplayer-volume
w		emacspeak-alsaplayer-where
x		emacspeak-alsaplayer-clip

M-l		emacspeak-amark-load
M-s		emacspeak-amark-save

In addition to any hooks its parent mode `special-mode' might have run,
this mode runs the hook `emacspeak-alsaplayer-mode-hook', as the final step
during initialization.
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-next nil
@kbd{Not bound to any key.}

Next  alsaplayer
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-pause nil
@kbd{Not bound to any key.}

Pause or resume alsaplayer
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-previous nil
@kbd{Not bound to any key.}

Previous  alsaplayer
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-quit nil
@kbd{Not bound to any key.}

Quit  alsaplayer
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-relative nil
@kbd{Not bound to any key.}

Relative seek  alsaplayer
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-replace-queue nil
@kbd{Not bound to any key.}

Replace currently playing music.
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-seek nil
@kbd{Not bound to any key.}

Absolute seek  alsaplayer
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-speed nil
@kbd{Not bound to any key.}

Set speed in alsaplayer.
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-start nil
@kbd{Not bound to any key.}

Start  alsaplayer
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-status nil
@kbd{Not bound to any key.}

Show alsaplayer status
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-stop nil
@kbd{Not bound to any key.}

Stop  alsaplayer
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-volume nil
@kbd{Not bound to any key.}

Set volume.
@end deffn

@deffn {Interactive Command} emacspeak-alsaplayer-where nil
@kbd{Not bound to any key.}

Speak current position and copy it to kill ring.
@end deffn

@node emacspeak-amark
@section emacspeak-amark

Commentary:
Structure emacspeak-amark holds a bookmark into an mp3 file
path: fully qualified pathname  to file being marked
name: Bookmark tag
Position: time offset from start 

This library will be used from emacspeak-m-player,
emacspeak-alsaplayer and friends to set and jump to bookmarks.

Automatically generated documentation
for commands defined in module  emacspeak-amark.

@deffn {Interactive Command} emacspeak-amark-add nil
@kbd{Not bound to any key.}

Add an AMark to the buffer local list of AMarks.
AMarks are bookmarks in audio content.
@end deffn

@deffn {Interactive Command} emacspeak-amark-find nil
@kbd{Not bound to any key.}

Return matching AMark if found in buffer-local AMark list.
@end deffn

@deffn {Interactive Command} emacspeak-amark-load nil
@kbd{Not bound to any key.}

Locate AMarks file from current directory, and load it.
@end deffn

@deffn {Interactive Command} emacspeak-amark-save nil
@kbd{Not bound to any key.}

Save buffer-local AMarks in current directory.
@end deffn

@node emacspeak-arc
@section emacspeak-arc

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-arc.

@deffn {Interactive Command} emacspeak-arc-speak-file-modification-time nil
@kbd{Not bound to any key.}

Speak modification time of the file on current line
@end deffn

@deffn {Interactive Command} emacspeak-arc-speak-file-name nil
@kbd{Not bound to any key.}

Speak the name of the file on current line
@end deffn

@deffn {Interactive Command} emacspeak-arc-speak-file-permissions nil
@kbd{Not bound to any key.}

Speak permissions of file current entry 
@end deffn

@deffn {Interactive Command} emacspeak-arc-speak-file-size nil
@kbd{Not bound to any key.}

Speak the size of the file on current line
@end deffn

@node emacspeak-aumix
@section emacspeak-aumix

Commentary:
Provides an AUI to setting up the auditory display via AUMIX
This module is presently Linux specific

Automatically generated documentation
for commands defined in module  emacspeak-aumix.

@deffn {Interactive Command} emacspeak-aumix-edit nil
@kbd{Not bound to any key.}

Edit aumix settings interactively. 
Run command M-x emacspeak-aumix-reset
after saving the settings to have them take effect.
@end deffn

@deffn {Interactive Command} emacspeak-aumix-reset nil
@kbd{Not bound to any key.}

Reset to default audio settings.
@end deffn

@deffn {Interactive Command} emacspeak-aumix-volume-decrease nil
@kbd{Not bound to any key.}

Decrease overall volume. 
@end deffn

@deffn {Interactive Command} emacspeak-aumix-volume-increase nil
@kbd{Not bound to any key.}

Increase overall volume. 
@end deffn

@deffn {Interactive Command} emacspeak-aumix-wave-decrease nil
@kbd{Not bound to any key.}

Decrease volume of wave output. 
@end deffn

@deffn {Interactive Command} emacspeak-aumix-wave-increase nil
@kbd{Not bound to any key.}

Increase volume of wave output. 
@end deffn

@node emacspeak-bookshare
@section emacspeak-bookshare

Commentary:
BOOKSHARE == http://www.bookshare.org provides book access to print-disabled users.
It provides a simple Web  API http://developer.bookshare.org
This module implements an Emacspeak Bookshare client.
For now, users will need to get their own API key

Automatically generated documentation
for commands defined in module  emacspeak-bookshare.

@deffn {Interactive Command} emacspeak-bookshare nil
@kbd{ control e control b }

Bookshare  Interaction.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-action nil
@kbd{Not bound to any key.}

Call action specified by  invoking key.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-author-search nil
@kbd{Not bound to any key.}

Perform a Bookshare author search.
Interactive prefix arg filters search by category.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-browse nil
@kbd{Not bound to any key.}

Browse Bookshare.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-browse-latest nil
@kbd{Not bound to any key.}

Return latest books.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-browse-popular nil
@kbd{Not bound to any key.}

Browse popular books.
Optional interactive prefix arg prompts for a category to use as a filter.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-download-brf nil
@kbd{Not bound to any key.}

Download Daisy format of specified book to target location.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-download-brf-at-point nil
@kbd{Not bound to any key.}

Download Braille version of book under point.
Target location is generated from author and title.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-download-daisy nil
@kbd{Not bound to any key.}

Download Daisy format of specified book to target location.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-download-daisy-at-point nil
@kbd{Not bound to any key.}

Download Daisy version of book under point.
Target location is generated from author and title.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-download-internal nil
@kbd{Not bound to any key.}

Download content  to target location.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-expand-at-point nil
@kbd{Not bound to any key.}

Expand entry at point by retrieving metadata.
Once retrieved, memoize to avoid multiple retrievals.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-extract-and-view nil
@kbd{Not bound to any key.}

Extract content referred to by link under point, and render via the browser.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-extract-xml nil
@kbd{Not bound to any key.}

Extract content referred to by link under point, and return an XML buffer.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-flush-lines nil
@kbd{Not bound to any key.}

Flush lines matching regexp in Bookshare buffer.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-fulltext nil
@kbd{Not bound to any key.}

Display fulltext contents of  book in specified directory.
Useful for fulltext search in a book.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-fulltext-search nil
@kbd{Not bound to any key.}

Perform a Bookshare fulltext search.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-get-more-results nil
@kbd{Not bound to any key.}

Get next page of results for last query.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-id-search nil
@kbd{Not bound to any key.}

Perform a Bookshare id search.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-isbn-search nil
@kbd{Not bound to any key.}

Perform a Bookshare isbn search.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-list-preferences nil
@kbd{Not bound to any key.}

Return preference list.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-mode nil
@kbd{Not bound to any key.}

A Bookshare front-end for the Emacspeak desktop.

The Emacspeak Bookshare front-end is launched by command
emacspeak-bookshare bound to C-e C-b

This command switches to a special buffer that has Bookshare
commands bounds to single keystrokes-- see the key-binding list at
the end of this description. Use Emacs online help facility to
look up help on these commands.

emacspeak-bookshare-mode provides the necessary functionality to
Search and download Bookshare material,
Manage a local library of downloaded Bookshare content,
And commands to easily read newer Daisy books from Bookshare.

Here is a list of all emacspeak Bookshare commands along with their key-bindings:
a Author Search
A Author/Title Search
t Title Search
s Full Text Search
d Date Search
b Browse

key             binding
---             -------

RET		emacspeak-bookshare-toc-at-point
ESC		Prefix Command
SPC		emacspeak-bookshare-expand-at-point
+		emacspeak-bookshare-action
A		emacspeak-bookshare-action
B		emacspeak-bookshare-download-brf-at-point
C		emacspeak-bookshare-fulltext
D		emacspeak-bookshare-download-daisy-at-point
I		emacspeak-bookshare-action
P		emacspeak-bookshare-action
S		emacspeak-bookshare-action
U		emacspeak-bookshare-unpack-at-point
V		emacspeak-bookshare-view-at-point
[		backward-page
]		forward-page
a		emacspeak-bookshare-action
b		emacspeak-bookshare-browse
c		emacspeak-bookshare-toc-at-point
d		emacspeak-bookshare-action
e		emacspeak-epub
f		emacspeak-bookshare-flush-lines
i		emacspeak-bookshare-action
j		next-line
k		previous-line
l .. m		emacspeak-bookshare-action
p		emacspeak-bookshare-action
q		bury-buffer
s .. t		emacspeak-bookshare-action
v		emacspeak-bookshare-view

M-n		emacspeak-bookshare-next-result
M-p		emacspeak-bookshare-previous-result

In addition to any hooks its parent mode `special-mode' might have run,
this mode runs the hook `emacspeak-bookshare-mode-hook', as the final step
during initialization.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-next-result nil
@kbd{Not bound to any key.}

Move to next result.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-periodical-list nil
@kbd{Not bound to any key.}

Return list of periodicals.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-previous-result nil
@kbd{Not bound to any key.}

Move to previous result.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-set-preference nil
@kbd{Not bound to any key.}

Set preference preference-id to value.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-sign-out nil
@kbd{Not bound to any key.}

Sign out, clearing password.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-since-search nil
@kbd{Not bound to any key.}

Perform a Bookshare date  search.
Optional interactive prefix arg filters by category.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-title-search nil
@kbd{Not bound to any key.}

Perform a Bookshare title search.
Interactive prefix arg filters search by category.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-title/author-search nil
@kbd{Not bound to any key.}

Perform a Bookshare title/author  search.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-toc nil
@kbd{Not bound to any key.}

View TOC for book in specified directory.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-toc-at-point nil
@kbd{Not bound to any key.}

View TOC for book at point.
Make sure it's downloaded and unpacked first.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-unpack-at-point nil
@kbd{Not bound to any key.}

Unpack downloaded content if necessary.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-url-executor nil
@kbd{Not bound to any key.}

Custom URL executor for use in Bookshare TOC.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-version-handler nil
@kbd{Not bound to any key.}

Do nothing and return nil.
This function accepts any number of arguments, but ignores them.

(fn &rest IGNORE)
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-view nil
@kbd{Not bound to any key.}

View book in specified directory.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-view-at-point nil
@kbd{Not bound to any key.}

View book at point.
Make sure it's downloaded and unpacked first.
@end deffn

@deffn {Interactive Command} emacspeak-bookshare-view-page-range nil
@kbd{Not bound to any key.}

Play pages in specified page range from URL.
@end deffn

@node emacspeak-bs
@section emacspeak-bs

Commentary:
speech-enable bs.el -- an alternative to Emacs' default  list-buffers

Automatically generated documentation
for commands defined in module  emacspeak-bs.

@deffn {Interactive Command} emacspeak-bs-speak-buffer-line nil
@kbd{Not bound to any key.}

Speak information about this buffer
@end deffn

@node emacspeak-buff-menu
@section emacspeak-buff-menu

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-buff-menu.

@deffn {Interactive Command} emacspeak-list-buffers-next-line nil
@kbd{Not bound to any key.}

Speech enabled buffer menu navigation
@end deffn

@deffn {Interactive Command} emacspeak-list-buffers-previous-line nil
@kbd{Not bound to any key.}

Speech enabled buffer menu navigation
@end deffn

@deffn {Interactive Command} emacspeak-list-buffers-speak-buffer-line nil
@kbd{Not bound to any key.}

Speak information about this buffer
@end deffn

@deffn {Interactive Command} emacspeak-list-buffers-speak-buffer-name nil
@kbd{Not bound to any key.}

Speak the name of the buffer on this line
@end deffn

@node emacspeak-c
@section emacspeak-c

Commentary:
Make some of C and C++ mode more emacspeak friendly
Works with both boring c-mode
and the excellent cc-mode

Automatically generated documentation
for commands defined in module  emacspeak-c.

@deffn {Interactive Command} emacspeak-c-speak-semantics nil
@kbd{Not bound to any key.}

Speak the C semantics of this line. 
@end deffn

@node emacspeak-calendar
@section emacspeak-calendar

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-calendar.

@deffn {Interactive Command} emacspeak-appt-repeat-announcement nil
@kbd{ control e  cap A  }

Speaks the most recently displayed appointment message if any.
@end deffn

@deffn {Interactive Command} emacspeak-calendar-setup-sunrise-sunset nil
@kbd{Not bound to any key.}

Set up geo-coordinates using Google Maps reverse geocoding.
To use, configure variable gweb-my-address via M-x customize-variable.
@end deffn

@deffn {Interactive Command} emacspeak-calendar-speak-date nil
@kbd{Not bound to any key.}

Speak the date under point when called in Calendar Mode. 
@end deffn

@node emacspeak-compile
@section emacspeak-compile

Commentary:
This module makes compiling code from inside Emacs speech friendly.
It is an example of how a little amount of code can make Emacspeak even better.

Automatically generated documentation
for commands defined in module  emacspeak-compile.

@deffn {Interactive Command} emacspeak-compilation-speak-error nil
@kbd{Not bound to any key.}

Speech feedback about the compilation error. 
@end deffn

@node emacspeak-custom
@section emacspeak-custom

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-custom.

@deffn {Interactive Command} emacspeak-custom-goto-group nil
@kbd{Not bound to any key.}

Jump to custom group when in a customization buffer.
@end deffn

@deffn {Interactive Command} emacspeak-custom-goto-toolbar nil
@kbd{Not bound to any key.}

Jump to custom toolbar when in a customization buffer.
@end deffn

@node emacspeak-daisy
@section emacspeak-daisy

Commentary:
Daisy Digital Talking Book Reader

Automatically generated documentation
for commands defined in module  emacspeak-daisy.

@deffn {Interactive Command} emacspeak-daisy-define-outline-pattern nil
@kbd{Not bound to any key.}

Define persistent outline regexp for this book.
@end deffn

@deffn {Interactive Command} emacspeak-daisy-html nil
@kbd{Not bound to any key.}

Apply xslt transform specified by 
Uses keymap `emacspeak-daisy-xsl', which is not currently defined.

to convert and view Daisy Books as a Web page.
@end deffn

@deffn {Interactive Command} emacspeak-daisy-mark-position-in-content-under-point nil
@kbd{Not bound to any key.}

Mark current position in displayed content.
No-op if content under point is not currently displayed.
@end deffn

@deffn {Interactive Command} emacspeak-daisy-mode nil
@kbd{Not bound to any key.}

A DAISY front-end for the Emacspeak desktop.

Pre-requisites:

0) mpg123 for playing mp3 files
1) libxml and libxslt packages
2) xml-parse.el for parsing XML in Emacs Lisp.

The Emacspeak DAISY front-end is launched by command
emacspeak-daisy-open-book  bound to M-x emacspeak-daisy-open-book.

This command switches to a special buffer that has DAISY
commands bounds to single keystrokes-- see the key-binding
list at the end of this description.  Use Emacs online help
facility to look up help on these commands.

emacspeak-daisy-mode provides the necessary functionality to
navigate and listen to Daisy talking books.

Here is a list of all emacspeak DAISY commands along with their key-bindings:

key             binding
---             -------

RET		emacspeak-daisy-play-content-under-point
SPC		emacspeak-daisy-play-audio-under-point
?		describe-mode
P		emacspeak-daisy-play-page-range
S		emacspeak-daisy-save-bookmarks
h		emacspeak-daisy-html
m		emacspeak-daisy-mark-position-in-content-under-point
n		emacspeak-daisy-next-line
o		emacspeak-daisy-define-outline-pattern
p		emacspeak-daisy-previous-line
q		bury-buffer
s		emacspeak-daisy-stop-audio

In addition to any hooks its parent mode `text-mode' might have run,
this mode runs the hook `emacspeak-daisy-mode-hook', as the final step
during initialization.
@end deffn

@deffn {Interactive Command} emacspeak-daisy-next-line nil
@kbd{Not bound to any key.}

Move to next line.
@end deffn

@deffn {Interactive Command} emacspeak-daisy-open-book nil
@kbd{Not bound to any key.}

Open Digital Talking Book specified by navigation file filename.

This is the main entry point to the  Emacspeak Daisy reader.
Opening a Daisy navigation file (.ncx file) results in a
navigation buffer that can be used to browse and read the book.
@end deffn

@deffn {Interactive Command} emacspeak-daisy-play-audio-under-point nil
@kbd{Not bound to any key.}

Play audio clip under point.
@end deffn

@deffn {Interactive Command} emacspeak-daisy-play-content-under-point nil
@kbd{Not bound to any key.}

Play SMIL content  under point.
@end deffn

@deffn {Interactive Command} emacspeak-daisy-play-page-range nil
@kbd{Not bound to any key.}

Play pages in specified page range.
@end deffn

@deffn {Interactive Command} emacspeak-daisy-previous-line nil
@kbd{Not bound to any key.}

Move to previous line.
@end deffn

@deffn {Interactive Command} emacspeak-daisy-save-bookmarks nil
@kbd{Not bound to any key.}

Save bookmarks for current book.
@end deffn

@deffn {Interactive Command} emacspeak-daisy-stop-audio nil
@kbd{Not bound to any key.}

Stop audio.
@end deffn

@node emacspeak-dired
@section emacspeak-dired

Commentary:
This module speech enables dired.
It reduces the amount of speech you hear:
Typically you hear the file names as you move through the dired buffer
Voicification is used to indicate directories, marked files etc.

Automatically generated documentation
for commands defined in module  emacspeak-dired.

@deffn {Interactive Command} emacspeak-dired-label-fields nil
@kbd{Not bound to any key.}

Labels the fields of the listing in the dired buffer.
Currently is a no-op  unless
unless `dired-listing-switches' contains -l
@end deffn

@deffn {Interactive Command} emacspeak-dired-show-file-type nil
@kbd{Not bound to any key.}

Displays type of current file by running command file.
Like Emacs' built-in dired-show-file-type but allows user to customize
options passed to command `file'.
@end deffn

@deffn {Interactive Command} emacspeak-dired-speak-file-access-time nil
@kbd{Not bound to any key.}

Speak access time  of the current file.
@end deffn

@deffn {Interactive Command} emacspeak-dired-speak-file-modification-time nil
@kbd{Not bound to any key.}

Speak modification time  of the current file.
@end deffn

@deffn {Interactive Command} emacspeak-dired-speak-file-permissions nil
@kbd{Not bound to any key.}

Speak the permissions of the current file.
@end deffn

@deffn {Interactive Command} emacspeak-dired-speak-file-size nil
@kbd{Not bound to any key.}

Speak the size of the current file.
On a directory line, run du -s on the directory to speak its size.
@end deffn

@deffn {Interactive Command} emacspeak-dired-speak-header-line nil
@kbd{Not bound to any key.}

Speak the header line of the dired buffer. 
@end deffn

@deffn {Interactive Command} emacspeak-dired-speak-symlink-target nil
@kbd{Not bound to any key.}

Speaks the target of the symlink on the current line.
@end deffn

@node emacspeak-ecb
@section emacspeak-ecb

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-ecb.

@deffn {Interactive Command} emacspeak-ecb-speak-window-directories nil
@kbd{Not bound to any key.}

Speak contents of directories window.
@end deffn

@deffn {Interactive Command} emacspeak-ecb-speak-window-history nil
@kbd{Not bound to any key.}

Speak contents of history window.
@end deffn

@deffn {Interactive Command} emacspeak-ecb-speak-window-methods nil
@kbd{Not bound to any key.}

Speak contents of methods window.
@end deffn

@deffn {Interactive Command} emacspeak-ecb-speak-window-sources nil
@kbd{Not bound to any key.}

Speak contents of sources window.
@end deffn

@deffn {Interactive Command} emacspeak-ecb-tree-backspace nil
@kbd{Not bound to any key.}

Back up during incremental search in tree buffers.
@end deffn

@deffn {Interactive Command} emacspeak-ecb-tree-clear nil
@kbd{Not bound to any key.}

Clear search pattern during incremental search in tree buffers.
@end deffn

@deffn {Interactive Command} emacspeak-ecb-tree-expand-common-prefix nil
@kbd{Not bound to any key.}

Expand to longest common prefix in tree buffer.
@end deffn

@deffn {Interactive Command} emacspeak-ecb-tree-shift-return nil
@kbd{Not bound to any key.}

Do shift return in ECB tree browser.
@end deffn

@node emacspeak-ediff
@section emacspeak-ediff

Commentary:
Ediff provides a nice visual interface to diff. ;;;Comparing and
patching files is easy with ediff when you can see the screen.
This module provides Emacspeak extensions to work fluently
with ediff. Try it out, it's an excellent example of why
Emacspeak is better than a traditional screenreader. This module
was originally written to interface to the old ediff.el bundled
with GNU Emacs 19.28 and earlier. It has been updated to work
with the newer and much larger ediff system found in Emacs 19.29
and later.

Automatically generated documentation
for commands defined in module  emacspeak-ediff.

@deffn {Interactive Command} emacspeak-ediff-speak-current-difference nil
@kbd{Not bound to any key.}

Speak the current difference
@end deffn

@node emacspeak-enriched
@section emacspeak-enriched

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-enriched.

@deffn {Interactive Command} emacspeak-enriched-voiceify-faces nil
@kbd{Not bound to any key.}

Map base fonts to voices.
Useful in voiceifying rich text.
@end deffn

@node emacspeak-entertain
@section emacspeak-entertain

Commentary:
Auditory interface to misc games

Automatically generated documentation
for commands defined in module  emacspeak-entertain.

@deffn {Interactive Command} emacspeak-hangman-speak-guess nil
@kbd{Not bound to any key.}

Speak current guessed string. 
@end deffn

@deffn {Interactive Command} emacspeak-hangman-speak-statistics nil
@kbd{Not bound to any key.}

Speak statistics.
@end deffn

@node emacspeak-eperiodic
@section emacspeak-eperiodic

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-eperiodic.

@deffn {Interactive Command} emacspeak-eperiodic-goto-property-section nil
@kbd{Not bound to any key.}

Mark position and jump to properties section.
@end deffn

@deffn {Interactive Command} emacspeak-eperiodic-next-line nil
@kbd{Not bound to any key.}

Move to next row and speak element.
@end deffn

@deffn {Interactive Command} emacspeak-eperiodic-play-description nil
@kbd{Not bound to any key.}

Play audio description from WebElements.
@end deffn

@deffn {Interactive Command} emacspeak-eperiodic-previous-line nil
@kbd{Not bound to any key.}

Move to next row and speak element.
@end deffn

@deffn {Interactive Command} emacspeak-eperiodic-speak-current-element nil
@kbd{Not bound to any key.}

Speak element at point.
@end deffn

@node emacspeak-epub
@section emacspeak-epub

Commentary:
In celebration of a million books and more to read from
Google Books
The EPubs format is slightly simpler than full Daisy ---
(see) emacspeak-daisy.el
Since it only needs one level of indirection (no audio,
therefore no smil). This module is consequently simpler than
emacspeak-daisy.el.
This module will eventually  implement the Google Books  API
--- probably by invoking the yet-to-be-written gbooks.el in emacs-g-client
As we move to epub-3, this module will bring back audio layers etc., perhaps via a simplified smil implementation.

Automatically generated documentation
for commands defined in module  emacspeak-epub.

@deffn {Interactive Command} emacspeak-epub nil
@kbd{ control e g }

EPub  Interaction.
For detailed documentation, see M-x emacspeak-epub-mode
@end deffn

@deffn {Interactive Command} emacspeak-epub-bookshelf-add-directory nil
@kbd{Not bound to any key.}

Add EPubs found in specified directory to the bookshelf.
Interactive prefix arg searches recursively in directory.
@end deffn

@deffn {Interactive Command} emacspeak-epub-bookshelf-add-epub nil
@kbd{Not bound to any key.}

Add epub file to current bookshelf.
@end deffn

@deffn {Interactive Command} emacspeak-epub-bookshelf-clear nil
@kbd{Not bound to any key.}

Clear all books from bookshelf.
@end deffn

@deffn {Interactive Command} emacspeak-epub-bookshelf-load nil
@kbd{Not bound to any key.}

Load bookshelf metadata from disk.
@end deffn

@deffn {Interactive Command} emacspeak-epub-bookshelf-open nil
@kbd{Not bound to any key.}

Load bookshelf metadata from specified bookshelf.
@end deffn

@deffn {Interactive Command} emacspeak-epub-bookshelf-open-epub nil
@kbd{Not bound to any key.}

Open epub file and add it to current bookshelf.
@end deffn

@deffn {Interactive Command} emacspeak-epub-bookshelf-redraw nil
@kbd{Not bound to any key.}

Redraw Bookshelf.
Optional interactive prefix arg author-first prints author at the
  left.
@end deffn

@deffn {Interactive Command} emacspeak-epub-bookshelf-refresh nil
@kbd{Not bound to any key.}

Refresh and redraw bookshelf.
@end deffn

@deffn {Interactive Command} emacspeak-epub-bookshelf-remove-directory nil
@kbd{Not bound to any key.}

Remove EPubs found in specified directory from the bookshelf.
Interactive prefix arg searches recursively in directory.
@end deffn

@deffn {Interactive Command} emacspeak-epub-bookshelf-remove-this-book nil
@kbd{Not bound to any key.}

Remove the book on current line from this bookshelf.
No book files are deleted.
@end deffn

@deffn {Interactive Command} emacspeak-epub-bookshelf-rename nil
@kbd{Not bound to any key.}

Saves current bookshelf to  specified name.
Interactive prefix arg `overwrite' will overwrite existing file.
@end deffn

@deffn {Interactive Command} emacspeak-epub-bookshelf-save nil
@kbd{Not bound to any key.}

Save bookshelf metadata.
@end deffn

@deffn {Interactive Command} emacspeak-epub-browse-files nil
@kbd{Not bound to any key.}

Browse list of HTML files in an EPub.
Useful if table of contents in toc.ncx is empty.
@end deffn

@deffn {Interactive Command} emacspeak-epub-delete nil
@kbd{Not bound to any key.}

Delete EPub under point.
@end deffn

@deffn {Interactive Command} emacspeak-epub-fulltext nil
@kbd{Not bound to any key.}

Display fulltext from EPub in a buffer.
Suitable for text searches.
@end deffn

@deffn {Interactive Command} emacspeak-epub-google nil
@kbd{Not bound to any key.}

Search for Epubs from Gooble Books.
@end deffn

@deffn {Interactive Command} emacspeak-epub-gutenberg-catalog nil
@kbd{Not bound to any key.}

Open Gutenberg catalog.
Fetch if needed, or if refresh is T.
@end deffn

@deffn {Interactive Command} emacspeak-epub-gutenberg-download nil
@kbd{Not bound to any key.}

Download specified EBook to local cache
@end deffn

@deffn {Interactive Command} emacspeak-epub-mode nil
@kbd{Not bound to any key.}

An EPub Front-end.
Letters do not insert themselves; instead, they are commands.

key             binding
---             -------

C-a		emacspeak-epub-bookshelf-add-directory
C-d		emacspeak-epub-bookshelf-remove-directory
C-k		emacspeak-epub-delete
C-l		emacspeak-epub-bookshelf-redraw
RET		emacspeak-epub-open
C-o		emacspeak-epub-bookshelf-open-epub
C-x		Prefix Command
ESC		Prefix Command
C		emacspeak-epub-gutenberg-catalog
G		emacspeak-epub-gutenberg-download
a		emacspeak-epub-bookshelf-add-epub
b		emacspeak-epub-bookshelf-open
c		emacspeak-epub-bookshelf-clear
d		emacspeak-epub-bookshelf-remove-this-book
e		emacspeak-epub-bookshelf-rename
f		emacspeak-epub-browse-files
g		emacspeak-epub-google
n		next-line
o		emacspeak-epub-open
p		previous-line
r		emacspeak-epub-bookshelf-rename
t		emacspeak-epub-fulltext
<return>	emacspeak-epub-open

M-s		emacspeak-epub-bookshelf-save

C-x C-q		emacspeak-epub-bookshelf-refresh
C-x C-s		emacspeak-epub-bookshelf-save

In addition to any hooks its parent mode `special-mode' might have run,
this mode runs the hook `emacspeak-epub-mode-hook', as the final step
during initialization.
@end deffn

@deffn {Interactive Command} emacspeak-epub-next nil
@kbd{Not bound to any key.}

Move to next book.
@end deffn

@deffn {Interactive Command} emacspeak-epub-open nil
@kbd{Not bound to any key.}

Open specified Epub.
@end deffn

@deffn {Interactive Command} emacspeak-epub-previous nil
@kbd{Not bound to any key.}

Move to previous book.
@end deffn

@deffn {Interactive Command} emacspeak-epub-url-executor nil
@kbd{Not bound to any key.}

Custom URL executor for use in EPub Mode.
@end deffn

@node emacspeak-erc
@section emacspeak-erc

Commentary:
erc.el is a modern Emacs client for IRC including color
and font locking support. 
erc.el - an Emacs IRC client (by Alexander L. Belikoff)
http://www.cs.cmu.edu/~berez/irc/erc.el

Automatically generated documentation
for commands defined in module  emacspeak-erc.

@deffn {Interactive Command} emacspeak-erc-add-name-to-monitor nil
@kbd{Not bound to any key.}

Add people to monitor in this room.
Optional interactive prefix  arg defines a pronunciation that
  silences speaking of this perso's name.
@end deffn

@deffn {Interactive Command} emacspeak-erc-delete-name-from-monitor nil
@kbd{Not bound to any key.}

Remove name to monitor in this room.
@end deffn

@deffn {Interactive Command} emacspeak-erc-setup-cricket-rules nil
@kbd{Not bound to any key.}

Set up #cricket channels.
@end deffn

@deffn {Interactive Command} emacspeak-erc-toggle-my-monitor nil
@kbd{Not bound to any key.}

Toggle state of ERC  monitor of my messages.
Interactive PREFIX arg means toggle the global default value, and then
set the current local value to the result.
@end deffn

@deffn {Interactive Command} emacspeak-erc-toggle-room-monitor nil
@kbd{Not bound to any key.}

Toggle state of ERC room monitor.
Interactive 
PREFIX arg means toggle the global default value, and then
set the current local value to the result.
@end deffn

@deffn {Interactive Command} emacspeak-erc-toggle-speak-all-participants nil
@kbd{Not bound to any key.}

Toggle state of ERC speak all participants..
Interactive 
PREFIX arg means toggle the global default value, and then
set the current local value to the result.
@end deffn

@node emacspeak-eterm
@section emacspeak-eterm

Commentary:
This module makes eterm talk.
Eterm is the new terminal emulator for Emacs.
Use of emacspeak with eterm really needs an info page.
At present, the only documentation is the source level documentation.
This module uses Control-t as an additional prefix key to allow the user
To move around the terminal and have different parts spoken. 

Automatically generated documentation
for commands defined in module  emacspeak-eterm.

@deffn {Interactive Command} emacspeak-eterm-copy-region-to-register nil
@kbd{Not bound to any key.}

Copy text from terminal to an Emacs REGISTER.
This copies  region delimited by the emacspeak eterm marker 
set by command M-x emacspeak-eterm-set-marker and the 
emacspeak eterm pointer to a register.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-define-window nil
@kbd{Not bound to any key.}

Prompt for a window ID.
The window is then define to be
the rectangle delimited by point and eterm mark.  This is to
be used when emacspeak is set to review mode inside an
eterm.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-describe-window nil
@kbd{Not bound to any key.}

Describe an eterm  window.
Description indicates eterm window coordinates and whether it is stretchable
@end deffn

@deffn {Interactive Command} emacspeak-eterm-goto-line nil
@kbd{Not bound to any key.}

Move emacspeak eterm pointer to a specified LINE.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-kill-ring-save-region nil
@kbd{Not bound to any key.}

Copy text from terminal to kill ring.
This copies  region delimited by the emacspeak eterm marker 
set by command M-x emacspeak-eterm-set-marker and the 
emacspeak eterm pointer.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-maybe-send-raw nil
@kbd{Not bound to any key.}

Send a raw character through if in the terminal buffer.
Execute end of line if
in a non eterm buffer if executed via C-e C-e
@end deffn

@deffn {Interactive Command} emacspeak-eterm-paste-register nil
@kbd{Not bound to any key.}

Paste contents of REGISTER at current location.
If the specified register contains text, then that text is
sent to the terminal as if it were typed by the user.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-pointer-backward-word nil
@kbd{Not bound to any key.}

Move the pointer backward  by words. 
Interactive numeric prefix arg specifies number of words to move.
Argument COUNT specifies number of words by which to move.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-pointer-down nil
@kbd{Not bound to any key.}

Move the pointer down a line.
Argument COUNT specifies number of lines by which to move.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-pointer-forward-word nil
@kbd{Not bound to any key.}

Move the pointer forward by words. 
Interactive numeric prefix arg specifies number of words to move.
Argument COUNT specifies number of words by which to move.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-pointer-left nil
@kbd{Not bound to any key.}

Move the pointer left.
Argument COUNT specifies number of columns by which to move.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-pointer-right nil
@kbd{Not bound to any key.}

Move the pointer right.
Argument COUNT specifies number of columns by which to move.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-pointer-to-bottom nil
@kbd{Not bound to any key.}

Move the pointer to the bottom  of the screen.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-pointer-to-cursor nil
@kbd{Not bound to any key.}

Move the pointer to the cursor.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-pointer-to-left-edge nil
@kbd{Not bound to any key.}

Move the pointer to the right edge.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-pointer-to-next-color-change nil
@kbd{Not bound to any key.}

Move the eterm pointer to the next color change.
This allows you to move between highlighted regions of the screen.
Optional argument COUNT specifies how many changes to skip.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-pointer-to-previous-color-change nil
@kbd{Not bound to any key.}

Move the eterm pointer to the next color change.
This allows you to move between highlighted regions of the screen.
Optional argument COUNT specifies how many changes to skip.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-pointer-to-right-edge nil
@kbd{Not bound to any key.}

Move the pointer to the right edge.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-pointer-to-top nil
@kbd{Not bound to any key.}

Move the pointer to the top of the screen.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-pointer-up nil
@kbd{Not bound to any key.}

Move the pointer up a line.
Argument COUNT .specifies number of lines by which to move.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-remote-term nil
@kbd{ control e CONTROL meta r }

Start a terminal-emulator in a new buffer.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-search-backward nil
@kbd{Not bound to any key.}

Search backward on the terminal.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-search-forward nil
@kbd{Not bound to any key.}

Search forward on the terminal.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-set-filter-window nil
@kbd{Not bound to any key.}

Prompt for the id of a predefined window,
and set the `filter' window to it.
Non-nil interactive prefix arg `unsets' the filter window;
this is equivalent to having the entire terminal as the filter window (this is
what eterm starts up with).
Setting the filter window results in emacspeak  only monitoring screen
activity within the filter window.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-set-focus-window nil
@kbd{Not bound to any key.}

Prompt for the id of a predefined window,
and set the `focus' window to it.
Non-nil interactive prefix arg `unsets' the focus window;
this is equivalent to having the entire terminal as the focus window (this is
what eterm starts up with).
Setting the focus window results in emacspeak  monitoring screen
and speaking that window upon seeing screen activity.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-set-marker nil
@kbd{Not bound to any key.}

Set Emacspeak eterm marker.
This sets  the emacspeak eterm marker to the position pointed 
to by the emacspeak eterm pointer.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-speak-cursor nil
@kbd{Not bound to any key.}

Speak cursor position.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-speak-pointer nil
@kbd{Not bound to any key.}

Speak current pointer position.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-speak-pointer-char nil
@kbd{Not bound to any key.}

Speak char under eterm pointer.
Pronounces character phonetically unless  called with a PREFIX arg.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-speak-pointer-line nil
@kbd{Not bound to any key.}

Speak the line the pointer is on.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-speak-pointer-word nil
@kbd{Not bound to any key.}

Speak the word  the pointer is on.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-speak-predefined-window nil
@kbd{Not bound to any key.}

Speak a predefined eterm window between 1 and 10.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-speak-screen nil
@kbd{Not bound to any key.}

Speak the screen.  Default is to speak from the emacspeak pointer  to point.
Optional prefix arg FLAG causes region above
the Emacspeak pointer to be spoken.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-speak-window nil
@kbd{Not bound to any key.}

Speak an eterm window.
Argument ID specifies the window.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-toggle-filter-window nil
@kbd{Not bound to any key.}

Toggle active state of filter window.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-toggle-focus-window nil
@kbd{Not bound to any key.}

Toggle active state of focus window.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-toggle-pointer-mode nil
@kbd{Not bound to any key.}

Toggle emacspeak eterm pointer mode.
With optional interactive prefix  arg, turn it on.
When emacspeak eterm is in pointer mode, the eterm read pointer
stays where it is rather than automatically moving to the terminal cursor when
there is terminal activity.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-toggle-review nil
@kbd{Not bound to any key.}

Toggle state of eterm review. 
In review mode, you can move around the terminal and listen to the contnets 
without sending input to the terminal itself.
@end deffn

@deffn {Interactive Command} emacspeak-eterm-yank-window nil
@kbd{Not bound to any key.}

Yank contents of  an eterm window at point.
@end deffn

@deffn {Interactive Command} emacspeak-toggle-eterm-autospeak nil
@kbd{Not bound to any key.}

Toggle state of eterm autospeak.
When eterm autospeak is turned on and the terminal is in line mode,
all output to the terminal is automatically spoken. 
  Interactive prefix arg means toggle  the global default value, and then set the
  current local  value to the result. 
@end deffn

@node emacspeak-filtertext
@section emacspeak-filtertext

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-filtertext.

@deffn {Interactive Command} emacspeak-filtertext nil
@kbd{ control e ^ }

Copy over text in region to special filtertext buffer in
preparation for interactively filtering text. 
@end deffn

@deffn {Interactive Command} emacspeak-filtertext-mode nil
@kbd{Not bound to any key.}

Major mode for FilterText interaction. 

key             binding
---             -------

=		keep-lines
^		flush-lines
r		emacspeak-filtertext-revert

In addition to any hooks its parent mode `text-mode' might have run,
this mode runs the hook `emacspeak-filtertext-mode-hook', as the final step
during initialization.
@end deffn

@deffn {Interactive Command} emacspeak-filtertext-revert nil
@kbd{Not bound to any key.}

Revert to original text.
@end deffn

@node emacspeak-fix-interactive
@section emacspeak-fix-interactive

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-fix-interactive.

@deffn {Interactive Command} emacspeak-fix-all-recent-commands nil
@kbd{Not bound to any key.}

Fix recently loaded interactive commands.
This command looks through `load-history' and fixes commands if necessary.
Memoizes call in emacspeak-load-history-pointer to memoize this call. 
@end deffn

@deffn {Interactive Command} emacspeak-fix-commands-loaded-from nil
@kbd{Not bound to any key.}

Fix all commands loaded from a specified module.
@end deffn

@node emacspeak-forms
@section emacspeak-forms

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-forms.

@deffn {Interactive Command} emacspeak-forms-find-file nil
@kbd{Not bound to any key.}

Visit a forms file
@end deffn

@deffn {Interactive Command} emacspeak-forms-flush-unwanted-records nil
@kbd{Not bound to any key.}

Prompt for pattern and flush matching lines
@end deffn

@deffn {Interactive Command} emacspeak-forms-rerun-filter nil
@kbd{Not bound to any key.}

Rerun  filter --allows us to nuke more matching records
@end deffn

@deffn {Interactive Command} emacspeak-forms-speak-field nil
@kbd{Not bound to any key.}

Speak current form field name and value.
Assumes that point is at the front of a field value.
@end deffn

@deffn {Interactive Command} emacspeak-forms-summarize-current-position nil
@kbd{Not bound to any key.}

Summarize current position in list of records
@end deffn

@deffn {Interactive Command} emacspeak-forms-summarize-current-record nil
@kbd{Not bound to any key.}

Summarize current record
@end deffn

@node emacspeak-gnus
@section emacspeak-gnus

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-gnus.

@deffn {Interactive Command} emacspeak-gnus-summary-catchup-quietly-and-exit nil
@kbd{Not bound to any key.}

Catch up on all articles in current group.
@end deffn

@node emacspeak-gomoku
@section emacspeak-gomoku

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-gomoku.

@deffn {Interactive Command} emacspeak-gomoku-display-statistics nil
@kbd{Not bound to any key.}

Display statistics from previous games
@end deffn

@deffn {Interactive Command} emacspeak-gomoku-goto-x-y nil
@kbd{Not bound to any key.}

Prompt for and go to that square.
@end deffn

@deffn {Interactive Command} emacspeak-gomoku-show-current-column nil
@kbd{Not bound to any key.}

Aurally display current column
@end deffn

@deffn {Interactive Command} emacspeak-gomoku-show-current-negative-diagonal nil
@kbd{Not bound to any key.}

Aurally display current negative sloped diagonal 
@end deffn

@deffn {Interactive Command} emacspeak-gomoku-show-current-positive-diagonal nil
@kbd{Not bound to any key.}

Aurally display current positively sloped diagonal
@end deffn

@deffn {Interactive Command} emacspeak-gomoku-show-current-row nil
@kbd{Not bound to any key.}

Aurally display current row
@end deffn

@deffn {Interactive Command} emacspeak-gomoku-speak-emacs-previous-move nil
@kbd{Not bound to any key.}

Speak emacs' previous move
@end deffn

@deffn {Interactive Command} emacspeak-gomoku-speak-humans-previous-move nil
@kbd{Not bound to any key.}

Speak human' previous move
@end deffn

@deffn {Interactive Command} emacspeak-gomoku-speak-number-of-moves nil
@kbd{Not bound to any key.}

Speak number of moves so far
@end deffn

@deffn {Interactive Command} emacspeak-gomoku-speak-square nil
@kbd{Not bound to any key.}

Speak coordinates and state of square at point
@end deffn

@node emacspeak-google
@section emacspeak-google

Commentary:
There are a number of search tools that can be implemented on
the Google search page --- in a JS-powered browser, these
show up as the Google tool-belt.
This module implements a minor mode for use in Google result
pages that enables these tools via single keyboard commands.
Originally all options were available as tbs=p:v
Now, some specialized searches, e.g. blog search are tbm=

Automatically generated documentation
for commands defined in module  emacspeak-google.

@deffn {Interactive Command} emacspeak-google-show-toolbelt nil
@kbd{Not bound to any key.}

Reload search page with toolbelt showing.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-Shopping nil
@kbd{Not bound to any key.}

Change  Shopping in the currently active toolbelt.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-blog nil
@kbd{Not bound to any key.}

Change  blog in the currently active toolbelt.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-books nil
@kbd{Not bound to any key.}

Change  books in the currently active toolbelt.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-books-format nil
@kbd{Not bound to any key.}

Change  books-format in the currently active toolbelt.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-books-type nil
@kbd{Not bound to any key.}

Change  books-type in the currently active toolbelt.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-books-viewability nil
@kbd{Not bound to any key.}

Change  books-viewability in the currently active toolbelt.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-commercial nil
@kbd{Not bound to any key.}

Change  commercial in the currently active toolbelt.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-commercial-prices nil
@kbd{Not bound to any key.}

Change  commercial-prices in the currently active toolbelt.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-date-filter nil
@kbd{Not bound to any key.}

Change  date-filter in the currently active toolbelt.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-duration nil
@kbd{Not bound to any key.}

Change  duration in the currently active toolbelt.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-forums nil
@kbd{Not bound to any key.}

Change  forums in the currently active toolbelt.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-images nil
@kbd{Not bound to any key.}

Change  images in the currently active toolbelt.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-literal nil
@kbd{Not bound to any key.}

Change  literal in the currently active toolbelt.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-news nil
@kbd{Not bound to any key.}

Change  news in the currently active toolbelt.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-non-commercial nil
@kbd{Not bound to any key.}

Change  non-commercial in the currently active toolbelt.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-recent nil
@kbd{Not bound to any key.}

Change  recent in the currently active toolbelt.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-reviews nil
@kbd{Not bound to any key.}

Change  reviews in the currently active toolbelt.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-social nil
@kbd{Not bound to any key.}

Change  social in the currently active toolbelt.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-sort-by-date nil
@kbd{Not bound to any key.}

Change  sort-by-date in the currently active toolbelt.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-structured-snippets nil
@kbd{Not bound to any key.}

Change  structured-snippets in the currently active toolbelt.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-timeline nil
@kbd{Not bound to any key.}

Change  timeline in the currently active toolbelt.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-timeline-high nil
@kbd{Not bound to any key.}

Change  timeline-high in the currently active toolbelt.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-timeline-low nil
@kbd{Not bound to any key.}

Change  timeline-low in the currently active toolbelt.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-video nil
@kbd{Not bound to any key.}

Change  video in the currently active toolbelt.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-web-history-not-visited nil
@kbd{Not bound to any key.}

Change  web-history-not-visited in the currently active toolbelt.
@end deffn

@deffn {Interactive Command} emacspeak-google-toolbelt-change-web-history-visited nil
@kbd{Not bound to any key.}

Change  web-history-visited in the currently active toolbelt.
@end deffn

@node emacspeak-gridtext
@section emacspeak-gridtext

Commentary:
Emacspeak's table browsing mode allows one to
efficiently access  content that is tabular in nature.
That module also provides functions for infering table
structure where possible.
Often, such structure is hard to infer automatically
--but might be known to the user 
e.g. treat columns 1 through 30 as one column of a table
and so on.
This module allows the user to specify a conceptual grid
that is "overlaid" on the region of text to turn it into
a table for tabular browsing. For now, elements of the
grid are "one line" high --but that may change in the
future if necessary. This module is useful for browsing
structured text files and the output from programs that
tabulate their output.
It's also useful for handling multicolumn text.

Automatically generated documentation
for commands defined in module  emacspeak-gridtext.

@deffn {Interactive Command} emacspeak-gridtext-apply nil
@kbd{ control e # a }

Apply grid to region.
@end deffn

@deffn {Interactive Command} emacspeak-gridtext-load nil
@kbd{ control e # l }

Load saved grid settings.
@end deffn

@deffn {Interactive Command} emacspeak-gridtext-save nil
@kbd{ control e # s }

Save out grid settings.
@end deffn

@node emacspeak-hide
@section emacspeak-hide

Commentary:
Flexible hide and show for emacspeak.
This module allows one to easily hide or expose
blocks of lines starting with a common prefix.
It is motivated by the need to flexibly hide quoted text in email
but is designed to be more general.
the prefix parsing is inspired by filladapt.el

Automatically generated documentation
for commands defined in module  emacspeak-hide.

@deffn {Interactive Command} emacspeak-hide-or-expose-all-blocks nil
@kbd{Not bound to any key.}

Hide or expose all blocks in buffer.
@end deffn

@deffn {Interactive Command} emacspeak-hide-or-expose-block nil
@kbd{ control e j }

Hide or expose a block of text.
This command either hides or exposes a block of text
starting on the current line.  A block of text is defined as
a portion of the buffer in which all lines start with a
common PREFIX.  Optional interactive prefix arg causes all
blocks in current buffer to be hidden or exposed.
@end deffn

@deffn {Interactive Command} emacspeak-hide-speak-block-sans-prefix nil
@kbd{ control e control j }

Speaks current block after stripping its prefix.
If the current block is not hidden, it first hides it.
This is useful because as you locate blocks, you can invoke this
command to listen to the block,
and when you have heard enough navigate easily  to move past the block.
@end deffn

@node emacspeak-ibuffer
@section emacspeak-ibuffer

Commentary:
speech-enable ibuffer.el
this is an alternative to buffer-menu

Automatically generated documentation
for commands defined in module  emacspeak-ibuffer.

@deffn {Interactive Command} emacspeak-ibuffer-speak-buffer-line nil
@kbd{Not bound to any key.}

Speak information about this buffer
@end deffn

@node emacspeak-imenu
@section emacspeak-imenu

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-imenu.

@deffn {Interactive Command} emacspeak-imenu-goto-next-index-position nil
@kbd{Not bound to any key.}

Goto the next index position in current buffer
@end deffn

@deffn {Interactive Command} emacspeak-imenu-goto-previous-index-position nil
@kbd{Not bound to any key.}

Goto the previous index position in current buffer
@end deffn

@deffn {Interactive Command} emacspeak-imenu-speak-this-section nil
@kbd{Not bound to any key.}

Speak upto start of next index entry
@end deffn

@node emacspeak-info
@section emacspeak-info

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-info.

@deffn {Interactive Command} emacspeak-info-speak-header nil
@kbd{Not bound to any key.}

Speak info header line.
@end deffn

@deffn {Interactive Command} emacspeak-info-wizard nil
@kbd{ control h TAB   <f1> TAB   <help> TAB }

Read a node spec from the minibuffer and launch
Info-goto-node.
See documentation for command `Info-goto-node' for details on
node-spec.
@end deffn

@node emacspeak-jabber
@section emacspeak-jabber

Commentary:
emacs-jabber.el implements a  jabber client for emacs
emacs-jabber is hosted at sourceforge.
I use emacs-jabber with my gmail.com account

Automatically generated documentation
for commands defined in module  emacspeak-jabber.

@deffn {Interactive Command} emacspeak-jabber-chat-next-message nil
@kbd{Not bound to any key.}

Move forward to and speak the next message in this chat
session.
@end deffn

@deffn {Interactive Command} emacspeak-jabber-chat-previous-message nil
@kbd{Not bound to any key.}

Move backward to and speak the previous message in this chat
session.
@end deffn

@deffn {Interactive Command} emacspeak-jabber-chat-speak-this-message nil
@kbd{Not bound to any key.}

Speaks message starting on current line.
Assumes point is at the front of the message.
Returns a cons (start . end) that delimits the message.
@end deffn

@deffn {Interactive Command} emacspeak-jabber-popup-roster nil
@kbd{Not bound to any key.}

Pop to Jabber roster.
@end deffn

@node emacspeak-keymap
@section emacspeak-keymap

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-keymap.

@deffn {Interactive Command} emacspeak-keymap-choose-new-emacspeak-prefix nil
@kbd{Not bound to any key.}

Interactively select a new prefix key to use for all emacspeak
commands.  The default is to use `C-e'  This command
lets you switch the prefix to something else.  This is a useful thing
to do if you run emacspeak on a remote machine from inside a terminal
that is running inside a local emacspeak session.  You can have the
remote emacspeak use a different control key to give your fingers some
relief.
@end deffn

@node emacspeak-librivox
@section emacspeak-librivox

Commentary:
LIBRIVOX == http://wwwlibrivox.org Free Audio Books
It provides a simple Web  API http://wiki.librivox.org/index.php/LibriVoxAPI
This module implements an Emacspeak Librivox client.

Automatically generated documentation
for commands defined in module  emacspeak-librivox.

@deffn {Interactive Command} emacspeak-librivox nil
@kbd{Not bound to any key.}

Librivox Library Of Free Audio Books.
@end deffn

@deffn {Interactive Command} emacspeak-librivox-fetch-catalog nil
@kbd{Not bound to any key.}

Fetch catalog to our cache location.
@end deffn

@deffn {Interactive Command} emacspeak-librivox-mode nil
@kbd{Not bound to any key.}

A Librivox front-end for the Emacspeak Audio Desktop.

In addition to any hooks its parent mode `emacspeak-table-mode' might have run,
this mode runs the hook `emacspeak-librivox-mode-hook', as the final step
during initialization.

key             binding
---             -------

RET		emacspeak-librivox-open-rss
F		emacspeak-librivox-fetch-catalog
P		emacspeak-librivox-play
S		emacspeak-librivox-searcher
u		emacspeak-librivox-open-url
<C-return>	emacspeak-librivox-play

S a		emacspeak-librivox-search-author
S g		emacspeak-librivox-search-genre
S t		emacspeak-librivox-search-title

@end deffn

@deffn {Interactive Command} emacspeak-librivox-open-rss nil
@kbd{Not bound to any key.}

Open RSS  link for current Librivox book.
@end deffn

@deffn {Interactive Command} emacspeak-librivox-open-url nil
@kbd{Not bound to any key.}

Open Librivox URL  for current Librivox book.
@end deffn

@deffn {Interactive Command} emacspeak-librivox-play nil
@kbd{Not bound to any key.}

Play current book as a playlist.
@end deffn

@deffn {Interactive Command} emacspeak-librivox-search-author nil
@kbd{Not bound to any key.}

Search in catalog for Author 1.
@end deffn

@deffn {Interactive Command} emacspeak-librivox-search-genre nil
@kbd{Not bound to any key.}

Search in catalog for genre.
@end deffn

@deffn {Interactive Command} emacspeak-librivox-search-title nil
@kbd{Not bound to any key.}

Search in catalog for title.
@end deffn

@node emacspeak-loaddefs
@section emacspeak-loaddefs

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-loaddefs.

@deffn {Interactive Command} emacspeak-mark-forward-mark nil
@kbd{ <control down> }

:around advice: `ad-Advice-pop-to-mark-command'

Jump to mark, and pop a new position for mark off the ring.
(Does not affect global mark ring).

(fn)
@end deffn

@deffn {Interactive Command} emacspeak-toggle-comint-output-monitor nil
@kbd{ control e o }

Toggle state of Emacspeak comint monitor.
When turned on, comint output is automatically spoken.  Turn this on if
you want your shell to speak its results.  Interactive
PREFIX arg means toggle the global default value, and then
set the current local value to the result.
@end deffn

@node emacspeak-m-player
@section emacspeak-m-player

Commentary:
Defines a simple derived mode for interacting with mplayer.
mplayer  is a versatile media player capable of playing many
streaming formats  and is especially useful for playing windows
media (WMA) and streaming windows media (ASF) files.
mplayer is available  on the WWW:
RPM package
http://mirrors.sctpc.com/dominik/linux/pkgs/mplayer/i586/mplayer-0.90pre5-2.i586.rpm
You may need the  win32 codecs which can be downloaded from 
http://ftp.lug.udel.edu/MPlayer/releases/w32codec-0.60.tar.bz2
Mplayer FAQ at
http://www.mplayerhq.hu/DOCS/faq.html
Mplayer docs at 
http://www.mplayerhq.hu/DOCS/

Automatically generated documentation
for commands defined in module  emacspeak-m-player.

@deffn {Interactive Command} emacspeak-m-player-add-equalizer nil
@kbd{Not bound to any key.}

Add equalizer for next MPlayer invocation.

Use arrow keys, page-up, page-down, home and end keys to
  manipulate the values.
Hit enter to finish setting the equalizer values.

The Mplayer equalizer provides 10 bands, G0 -- G9, see the
  MPlayer man page for details.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-add-filter nil
@kbd{Not bound to any key.}

Adds specified filter  to use for the next invocation of MPlayer.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-alt-src-step nil
@kbd{Not bound to any key.}

Move within an ASF playlist.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-backward-10min nil
@kbd{Not bound to any key.}

Move backward by ten minutes.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-backward-10s nil
@kbd{Not bound to any key.}

Move back by 10 seconds.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-backward-1min nil
@kbd{Not bound to any key.}

Move back by 1 minute.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-balance nil
@kbd{Not bound to any key.}

Set left/right balance.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-beginning-of-track nil
@kbd{Not bound to any key.}

Move to beginning of track.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-bind-accelerator nil
@kbd{Not bound to any key.}

Binds key to invoke m-player  on specified directory.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-command nil
@kbd{Not bound to any key.}

Invoke MPlayer commands.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-customize-options nil
@kbd{Not bound to any key.}

Use Customize to manipulate MPlayer options.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-display-position nil
@kbd{Not bound to any key.}

Display current position in track and its length.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-double-speed nil
@kbd{Not bound to any key.}

Scale speed by 2.0
@end deffn

@deffn {Interactive Command} emacspeak-m-player-end-of-track nil
@kbd{Not bound to any key.}

Move to beginning of track.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-equalizer-control nil
@kbd{Not bound to any key.}

Manipulate values in specified vector using minibuffer.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-faster nil
@kbd{Not bound to any key.}

Speed up  playback.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-forward-10min nil
@kbd{Not bound to any key.}

Move forward by ten minutes.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-forward-10s nil
@kbd{Not bound to any key.}

Move forward by 10 seconds.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-forward-1min nil
@kbd{Not bound to any key.}

Move forward by 1 minute.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-get-length nil
@kbd{Not bound to any key.}

Display length of track in seconds.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-half-speed nil
@kbd{Not bound to any key.}

Scale speed by 0.5.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-load nil
@kbd{Not bound to any key.}

Load specified resource into a running  m-player.
Interactive prefix arg appends the new resource to what is playing.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-load-file nil
@kbd{Not bound to any key.}

Load specified file.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-load-playlist nil
@kbd{Not bound to any key.}

Load specified playlist file.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-mode nil
@kbd{Not bound to any key.}

Major mode for m-player interaction. 

key             binding
---             -------

C-e		Prefix Command
RET		emacspeak-m-player-load
ESC		Prefix Command
SPC		emacspeak-m-player-pause
+		emacspeak-m-player-volume-up
,		emacspeak-m-player-backward-10s
-		emacspeak-m-player-volume-down
.		emacspeak-m-player-forward-10s
<		emacspeak-m-player-backward-1min
=		emacspeak-m-player-volume-up
>		emacspeak-m-player-forward-1min
?		emacspeak-m-player-display-position
L		emacspeak-m-player-load-file
O		emacspeak-m-player-reset-options
Q		emacspeak-m-player-quit
[		emacspeak-m-player-slower
]		emacspeak-m-player-faster
b		emacspeak-m-player-balance
c		emacspeak-m-player-slave-command
e		emacspeak-m-player-add-equalizer
f		emacspeak-m-player-add-filter
g		emacspeak-m-player-seek-absolute
k		emacspeak-m-player-bind-accelerator
l		emacspeak-m-player-get-length
m		emacspeak-m-player-speak-mode-line
n		emacspeak-m-player-next-track
o		emacspeak-m-player-customize-options
p		emacspeak-m-player-previous-track
q		bury-buffer
r		emacspeak-m-player-seek-relative
s		emacspeak-m-player-scale-speed
t		emacspeak-m-player-play-tracks-jump
v		emacspeak-m-player-volume-change
w		emacspeak-m-player-speak-current-info
@{		emacspeak-m-player-half-speed
@}		emacspeak-m-player-double-speed
DEL		emacspeak-m-player-reset-speed
<down>		emacspeak-m-player-forward-1min
<end>		emacspeak-m-player-end-of-track
<home>		emacspeak-m-player-beginning-of-track
<left>		emacspeak-m-player-backward-10s
<next>		emacspeak-m-player-forward-10min
<prior>		emacspeak-m-player-backward-10min
<right>		emacspeak-m-player-forward-10s
<up>		emacspeak-m-player-backward-1min

C-e m		emacspeak-m-player-speak-mode-line

M-l		emacspeak-m-player-load-playlist

In addition to any hooks its parent mode `comint-mode' might have run,
this mode runs the hook `emacspeak-m-player-mode-hook', as the final step
during initialization.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-next-track nil
@kbd{Not bound to any key.}

Move to next track.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-pause nil
@kbd{Not bound to any key.}

Pause or unpause media player.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-play-tracks-jump nil
@kbd{Not bound to any key.}

Move within the play tree.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-play-tree-up nil
@kbd{Not bound to any key.}

Move within the play tree.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-previous-track nil
@kbd{Not bound to any key.}

Move to previous track.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-quit nil
@kbd{Not bound to any key.}

Quit media player.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-reset-options nil
@kbd{Not bound to any key.}

Reset MPlayer options to initial defaults.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-reset-speed nil
@kbd{Not bound to any key.}

Reset playing speed to normal.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-resume nil
@kbd{Not bound to any key.}

Resume M-Player where it was stopped if possible.
Only works for local media sources, not Internet streams.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-scale-speed nil
@kbd{Not bound to any key.}

Scale speed by specified factor.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-seek-absolute nil
@kbd{Not bound to any key.}

Seek  to absolute specified position.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-seek-relative nil
@kbd{Not bound to any key.}

Seek  by offset into stream from current position.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-shuffle nil
@kbd{ control e : }

Launch M-Player with shuffle turned on.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-slave-command nil
@kbd{Not bound to any key.}

Dispatch slave command read from minibuffer.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-slower nil
@kbd{Not bound to any key.}

Slow down playback.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-speak-current-info nil
@kbd{Not bound to any key.}

Speak cached  info about currently playing file.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-speak-mode-line nil
@kbd{Not bound to any key.}

Speak mode line
@end deffn

@deffn {Interactive Command} emacspeak-m-player-url nil
@kbd{Not bound to any key.}

Call emacspeak-m-player with specified URL.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-volume-change nil
@kbd{Not bound to any key.}

Change volume.
A value of <number> changes volume by specified offset.
A string of the form `<number> 1' sets volume as an absolute.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-volume-down nil
@kbd{Not bound to any key.}

Decrease volume.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-volume-up nil
@kbd{Not bound to any key.}

Increase volume.
@end deffn

@deffn {Interactive Command} emacspeak-m-player-youtube-player nil
@kbd{Not bound to any key.}

Use youtube-dl and mplayer to stream YouTube content.
@end deffn

@deffn {Interactive Command} emacspeak-multimedia nil
@kbd{ control e ; }

Start or control Emacspeak multimedia player.
@end deffn

@node emacspeak-madplay
@section emacspeak-madplay

Commentary:
Defines a simple derived mode for interacting with
madplay.
madplay navigation commands  work via single keystrokes.

Automatically generated documentation
for commands defined in module  emacspeak-madplay.

@deffn {Interactive Command} emacspeak-aumix nil
@kbd{Not bound to any key.}

Setup output parameters of the auditory display.
 Launch this tool while you have auditory output on
multiple channels playing so you can
adjust the settings to your preference.  Hit q to quit when
you are done.
@end deffn

@deffn {Interactive Command} emacspeak-madplay nil
@kbd{Not bound to any key.}

Play specified resource using madplay.
Resource is an  MP3 file or directory containing mp3 files.
The player is placed in a buffer in emacspeak-madplay-mode.
@end deffn

@deffn {Interactive Command} emacspeak-madplay-madplay-call-command nil
@kbd{Not bound to any key.}

Call appropriate madplay command.
@end deffn

@deffn {Interactive Command} emacspeak-madplay-madplay-command nil
@kbd{Not bound to any key.}

Execute Madplay command.
@end deffn

@deffn {Interactive Command} emacspeak-madplay-mode nil
@kbd{Not bound to any key.}

Major mode for madplay interaction. 

key             binding
---             -------

+		emacspeak-madplay-madplay-call-command
-		emacspeak-madplay-madplay-call-command
b		emacspeak-madplay-madplay-call-command
f		emacspeak-madplay-madplay-call-command
o		emacspeak-madplay
p .. q		emacspeak-madplay-madplay-call-command
s .. t		emacspeak-madplay-madplay-call-command
<left>		emacspeak-aumix-wave-decrease
<right>		emacspeak-aumix-wave-increase

In addition to any hooks its parent mode `special-mode' might have run,
this mode runs the hook `emacspeak-madplay-mode-hook', as the final step
during initialization.
@end deffn

@node emacspeak-man
@section emacspeak-man

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-man.

@deffn {Interactive Command} emacspeak-man-browse-man-page nil
@kbd{Not bound to any key.}

Browse the man page --read it a paragraph at a time
@end deffn

@deffn {Interactive Command} emacspeak-man-speak-this-section nil
@kbd{Not bound to any key.}

Speak current section
@end deffn

@node emacspeak-npr
@section emacspeak-npr

Commentary:
NPR == http://wwwnpr.org National Public Radio in the US
It provides a simple Web  API http://www.npr.org/api/
This module implements an Emacspeak Npr client.

For now, users will need to get their own API key

Automatically generated documentation
for commands defined in module  emacspeak-npr.

@deffn {Interactive Command} emacspeak-npr-listing nil
@kbd{Not bound to any key.}

Display specified listing.
@end deffn

@deffn {Interactive Command} emacspeak-npr-listing-url-executor nil
@kbd{Not bound to any key.}

Special executor for use in NPR  listings.
@end deffn

@deffn {Interactive Command} emacspeak-npr-view nil
@kbd{Not bound to any key.}

View results as Atom.
@end deffn

@node emacspeak-ocr
@section emacspeak-ocr

Commentary:
This module defines Emacspeak front-end to OCR.
This module assumes that sane is installed and working
for image acquisition,
and that there is an OCR engine that can take acquired
images and produce text.
Prerequisites:
Sane installed and working.
scanimage to generate tiff files from scanner.
tiffcp to compress the tiff file.
working ocr executable 
by default this module assumes that the OCR executable
is named "ocr"

Automatically generated documentation
for commands defined in module  emacspeak-ocr.

@deffn {Interactive Command} emacspeak-ocr nil
@kbd{ control e control o }

An OCR front-end for the Emacspeak desktop.  

Page image is acquired using tools from the SANE package.
The acquired image is run through the OCR engine if one is
available, and the results placed in a buffer that is
suitable for browsing the results.

For detailed help, invoke command emacspeak-ocr bound to
C-e C-o to launch emacspeak-ocr-mode, and press
`?' to display mode-specific help for emacspeak-ocr-mode.
@end deffn

@deffn {Interactive Command} emacspeak-ocr-backward-page nil
@kbd{Not bound to any key.}

Like backward page, but tracks page number of current document.
@end deffn

@deffn {Interactive Command} emacspeak-ocr-customize nil
@kbd{Not bound to any key.}

Customize OCR settings.
@end deffn

@deffn {Interactive Command} emacspeak-ocr-flipflop-and-recognize-image nil
@kbd{Not bound to any key.}

Run OCR engine on current image after flip-flopping it.
Useful if you've scanned a page upside down and are using an engine that does not automatically flip the image for you.
You need the imagemagik family of tools --- we use mogrify to transform the image.
Prompts for image file if file corresponding to the expected
`current page' is not found.
@end deffn

@deffn {Interactive Command} emacspeak-ocr-forward-page nil
@kbd{Not bound to any key.}

Like forward page, but tracks page number of current document.
@end deffn

@deffn {Interactive Command} emacspeak-ocr-mode nil
@kbd{Not bound to any key.}

 An OCR front-end for the Emacspeak desktop.

Pre-requisites:

1) A working scanner back-end like SANE on Linux.

2) An OCR engine.

1: Make sure your scanner back-end works, and that you have
the utilities to scan a document and acquire an image as a
tiff file.  Then set variable
emacspeak-ocr-scan-image-program to point at this utility.
By default, this is set to `scanimage' which is the image
scanning utility provided by SANE.

By default, this front-end attempts to compress the acquired
tiff image; make sure you have a utility like tiffcp.
Variable emacspeak-ocr-compress-image is set to `tiffcp' by
default; if you use something else, you should customize
this variable.

2: Next, make sure you have an OCR engine installed and
working.  By default this front-end assumes that OCR is
available as /usr/bin/ocr.

Once you have ensured that acquiring an image and applying
OCR to it work independently of Emacs, you can use this
Emacspeak front-end to enable easy OCR access from within
Emacspeak.

The Emacspeak OCR front-end is launched by command
emacspeak-ocr bound to C-e C-o.  

This command switches to a special buffer that has OCR
commands bounds to single keystrokes-- see the key-binding
list at the end of this description.  Use Emacs online help
facility to look up help on these commands.

emacspeak-ocr-mode provides the necessary functionality to
scan, OCR, read and save documents.  By default, scanned
images and the resulting text are saved under directory
~/ocr; see variable emacspeak-ocr-working-directory.
Invoking command emacspeak-ocr-open-working-directory bound
to M-x emacspeak-ocr-open-working-directory will open this directory.

By default, the document being scanned is named `untitled'.
You can name the document by using command
emacspeak-ocr-name-document bound to
M-x emacspeak-ocr-name-document.  The document name is used
in constructing the name of the image and text files.

Key Bindings: 

See key             binding
---             -------

RET		emacspeak-ocr-scan-and-recognize
SPC		emacspeak-ocr-read-current-page
1 .. 9		emacspeak-ocr-page
?		describe-mode
C		emacspeak-ocr-set-compress-image-options
I		emacspeak-ocr-set-scan-image-options
[		emacspeak-ocr-backward-page
]		emacspeak-ocr-forward-page
c		emacspeak-ocr-customize
d		emacspeak-ocr-open-working-directory
f		emacspeak-ocr-flipflop-and-recognize-image
i		emacspeak-ocr-scan-image
j		emacspeak-ocr-scan-photo
n		emacspeak-ocr-name-document
o		emacspeak-ocr-recognize-image
p		emacspeak-ocr-page
q		bury-buffer
s		emacspeak-ocr-save-current-page
w		emacspeak-ocr-write-document

.

In addition to any hooks its parent mode `text-mode' might have run,
this mode runs the hook `emacspeak-ocr-mode-hook', as the final step
during initialization.
@end deffn

@deffn {Interactive Command} emacspeak-ocr-name-document nil
@kbd{Not bound to any key.}

Name document being scanned in the current OCR buffer.
Pick a short but meaningful name.
@end deffn

@deffn {Interactive Command} emacspeak-ocr-open-working-directory nil
@kbd{Not bound to any key.}

Launch dired on OCR working directory.
@end deffn

@deffn {Interactive Command} emacspeak-ocr-page nil
@kbd{Not bound to any key.}

Move to specified page.
@end deffn

@deffn {Interactive Command} emacspeak-ocr-read-current-page nil
@kbd{Not bound to any key.}

Speaks current page.
@end deffn

@deffn {Interactive Command} emacspeak-ocr-recognize-image nil
@kbd{Not bound to any key.}

Run OCR engine on current image.
Prompts for image file if file corresponding to the expected
`current page' is not found.
@end deffn

@deffn {Interactive Command} emacspeak-ocr-save-current-page nil
@kbd{Not bound to any key.}

Writes out recognized text from current page
to an appropriately named file.
@end deffn

@deffn {Interactive Command} emacspeak-ocr-scan-and-recognize nil
@kbd{Not bound to any key.}

Scan in a page and run OCR engine on it.
Use this command once you've verified that the separate
steps of acquiring an image and running the OCR engine work
correctly by themselves.
@end deffn

@deffn {Interactive Command} emacspeak-ocr-scan-image nil
@kbd{Not bound to any key.}

Acquire page image.
@end deffn

@deffn {Interactive Command} emacspeak-ocr-scan-photo nil
@kbd{Not bound to any key.}

Scan in a photograph.
The scanned image is converted to JPEG.
@end deffn

@deffn {Interactive Command} emacspeak-ocr-set-compress-image-options nil
@kbd{Not bound to any key.}

Interactively update  image compression options.
Prompts with current setting in the minibuffer.
Setting persists for current Emacs session.
@end deffn

@deffn {Interactive Command} emacspeak-ocr-set-scan-image-options nil
@kbd{Not bound to any key.}

Interactively update scan image options.
Prompts with current setting in the minibuffer.
Setting persists for current Emacs session.
@end deffn

@deffn {Interactive Command} emacspeak-ocr-write-document nil
@kbd{Not bound to any key.}

Writes out recognized text from all pages in current document.
@end deffn

@node emacspeak-outline
@section emacspeak-outline

Commentary:
Provide additional advice to outline-mode

Automatically generated documentation
for commands defined in module  emacspeak-outline.

@deffn {Interactive Command} emacspeak-outline-speak-backward-heading nil
@kbd{Not bound to any key.}

Analogous to outline-backward-same-level
except that the outline section is  spoken
@end deffn

@deffn {Interactive Command} emacspeak-outline-speak-forward-heading nil
@kbd{Not bound to any key.}

Analogous to outline-forward-same-level,
except that the outline section is  spoken
@end deffn

@deffn {Interactive Command} emacspeak-outline-speak-next-heading nil
@kbd{Not bound to any key.}

Analogous to outline-next-visible-heading,
except that the outline section is  spoken
@end deffn

@deffn {Interactive Command} emacspeak-outline-speak-previous-heading nil
@kbd{Not bound to any key.}

Analogous to outline-previous-visible-heading,
except that the outline section is  spoken
@end deffn

@deffn {Interactive Command} emacspeak-outline-speak-this-heading nil
@kbd{Not bound to any key.}

Speak current outline section starting from point
@end deffn

@node emacspeak-pianobar
@section emacspeak-pianobar

Commentary:
PIANOBAR ==  Pandora Client for Emacs

pianobar git://github.com/PromyLOPh/pianobar.git
Is a stand-alone client for Pandora Radio.
pianobar.el available on the Emacs Wiki at
http://www.emacswiki.org/emacs/pianobar.el
Provides access to Pandora Radio via pianobar from the comfort of Emacs.
This module speech-enables Pianobar and enhances it for the Complete Audio Desktop.

Automatically generated documentation
for commands defined in module  emacspeak-pianobar.

@deffn {Interactive Command} emacspeak-pianobar nil
@kbd{ control e ' }

Start or control Emacspeak Pianobar player.
@end deffn

@deffn {Interactive Command} emacspeak-pianobar-command nil
@kbd{Not bound to any key.}

Invoke Pianobar  commands.
@end deffn

@deffn {Interactive Command} emacspeak-pianobar-electric-mode-toggle nil
@kbd{Not bound to any key.}

Toggle electric mode in pianobar buffer.
If electric mode is on, keystrokes invoke pianobar commands directly.
@end deffn

@deffn {Interactive Command} emacspeak-pianobar-switch-to-preset nil
@kbd{Not bound to any key.}

Switch to one of the  presets.
@end deffn

@node emacspeak-pronounce
@section emacspeak-pronounce

Commentary:
This module implements user customizable pronunciation dictionaries
for emacspeak. Custom pronunciations can be defined per file, per
directory and/or per major mode. Emacspeak maintains a persistent
user dictionary upon request and loads these in new emacspeak
sessions. This module implements the user interface to the custom
dictionary as well as providing the internal API used by the rest
of emacspeak in using the dictionary.
Algorithm:

The persistent dictionary is a hash table where the hash keys are
filenames, directory names, or major-mode names. The hash values
are association lists defining the dictionary. Users of this module
can retrieve a dictionary made up of all applicable association
lists for a given file.

Automatically generated documentation
for commands defined in module  emacspeak-pronounce.

@deffn {Interactive Command} emacspeak-pronounce-clear-dictionaries nil
@kbd{Not bound to any key.}

Clear all current pronunciation dictionaries.
@end deffn

@deffn {Interactive Command} emacspeak-pronounce-define-local-pronunciation nil
@kbd{Not bound to any key.}

Define buffer local pronunciation.
Argument WORD specifies the word which should be pronounced as specified by PRONUNCIATION.
@end deffn

@deffn {Interactive Command} emacspeak-pronounce-define-pronunciation nil
@kbd{Not bound to any key.}

Interactively define entries in the pronunciation dictionaries.
Default term to define is delimited by region.
First loads any persistent dictionaries if not already loaded.
@end deffn

@deffn {Interactive Command} emacspeak-pronounce-define-template-pronunciation nil
@kbd{Not bound to any key.}

Interactively define template entries in the pronunciation dictionaries.
Default term to define is delimited by region.
First loads any persistent dictionaries if not already loaded.
@end deffn

@deffn {Interactive Command} emacspeak-pronounce-dispatch nil
@kbd{ control e meta d }

Provides the user interface front-end to Emacspeak's pronunciation dictionaries.
@end deffn

@deffn {Interactive Command} emacspeak-pronounce-edit-pronunciations nil
@kbd{Not bound to any key.}

Prompt for and launch a pronunciation editor on the
specified pronunciation dictionary key.
@end deffn

@deffn {Interactive Command} emacspeak-pronounce-load-dictionaries nil
@kbd{Not bound to any key.}

Load pronunciation dictionaries.
Optional argument FILENAME specifies the dictionary file.
@end deffn

@deffn {Interactive Command} emacspeak-pronounce-refresh-pronunciations nil
@kbd{Not bound to any key.}

Refresh pronunciation table for current buffer.
Activates pronunciation dictionaries if not already active.
@end deffn

@deffn {Interactive Command} emacspeak-pronounce-save-dictionaries nil
@kbd{Not bound to any key.}

Writes out the persistent emacspeak pronunciation dictionaries.
@end deffn

@deffn {Interactive Command} emacspeak-pronounce-toggle-use-of-dictionaries nil
@kbd{Not bound to any key.}

Toggle use of pronunciation dictionaries in current buffer.
Pronunciations can be defined on a per file, per directory and/or per
mode basis.
Pronunciations are activated on a per buffer basis.
Turning on the use of pronunciation dictionaries results in emacspeak
composing a pronunciation table based on the currently defined
pronunciation dictionaries.
After this, the pronunciations will be applied whenever text in the
buffer is spoken.
Optional argument state can be used from Lisp programs to
explicitly turn pronunciations on or off.
@end deffn

@deffn {Interactive Command} emacspeak-pronounce-yank-word nil
@kbd{Not bound to any key.}

Yank word at point into minibuffer.
@end deffn

@node emacspeak-redefine
@section emacspeak-redefine

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-redefine.

@deffn {Interactive Command} emacspeak-backward-char nil
@kbd{ control b   <left> }

Backward-char redefined to speak char moved to. 
@end deffn

@deffn {Interactive Command} emacspeak-forward-char nil
@kbd{ control f   <right> }

Forward-char redefined to speak char moved to. 
@end deffn

@deffn {Interactive Command} emacspeak-self-insert-command nil
@kbd{Not bound to any key.}

Insert a character.
Speaks the character if emacspeak-character-echo is true.
See  command emacspeak-toggle-word-echo bound to
C-e d w.
Speech flushes as you type.
@end deffn

@node emacspeak-remote
@section emacspeak-remote

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-remote.

@deffn {Interactive Command} emacspeak-remote-connect-to-server nil
@kbd{ control e meta r }

Connect to and start using remote speech server running on
host host and listening on port port. Host is the hostname of the
remote server, typically the desktop machine. Port is the tcp
port that that host is listening on for speech requests.
@end deffn

@deffn {Interactive Command} emacspeak-remote-edit-current-remote-hostname nil
@kbd{Not bound to any key.}

Interactively set up where we came from.
Value is persisted for use with ssh servers.
@end deffn

@deffn {Interactive Command} emacspeak-remote-home nil
@kbd{Not bound to any key.}

Open ssh session to where we came from.
Uses value returned by `emacspeak-remote-get-current-remote-hostname'.
@end deffn

@deffn {Interactive Command} emacspeak-remote-quick-connect-to-server nil
@kbd{Not bound to any key.}

Connect to remote server.
Does not prompt for host or port, but quietly uses the guesses
that appear as defaults when prompting. Use this once you are
sure the guesses are usually correct.
@end deffn

@deffn {Interactive Command} emacspeak-remote-quick-connect-via-ssh nil
@kbd{Not bound to any key.}

Connect via ssh to remote Emacspeak server.
Server is specified via custom option `emacspeak-remote-default-ssh-server'.
@end deffn

@deffn {Interactive Command} emacspeak-remote-ssh-to-server nil
@kbd{Not bound to any key.}

Open ssh session to where we came from.
@end deffn

@node emacspeak-rmail
@section emacspeak-rmail

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-rmail.

@deffn {Interactive Command} emacspeak-rmail-speak-current-message-labels nil
@kbd{Not bound to any key.}

Speak labels of current message
@end deffn

@deffn {Interactive Command} emacspeak-rmail-summarize-current-message nil
@kbd{Not bound to any key.}

Summarize current message
@end deffn

@node emacspeak-solitaire
@section emacspeak-solitaire

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-solitaire.

@deffn {Interactive Command} emacspeak-solitaire-show-column nil
@kbd{Not bound to any key.}

Display current row auditorallly
@end deffn

@deffn {Interactive Command} emacspeak-solitaire-show-row nil
@kbd{Not bound to any key.}

Display current row auditorallly
@end deffn

@deffn {Interactive Command} emacspeak-solitaire-speak-coordinates nil
@kbd{Not bound to any key.}

Speak coordinates of current position
@end deffn

@node emacspeak-sounds
@section emacspeak-sounds

Commentary:
This module provides the interface for generating auditory icons in emacspeak.
Design goal:
1) Auditory icons should be used to provide additional feedback,
not as a gimmick.
2) The interface should be usable at all times without the icons:
e.g. when on a machine without a sound card.
3) General principle for when to use an icon:
Convey information about events taking place in parallel.
For instance, if making a selection automatically moves the current focus
to the next choice,
We speak the next choice, while indicating the fact that something was selected with a sound cue.
 This interface will assume the availability of a shell command "play"
that can take one or more sound files and play them.
This module will also provide a mapping between names in the elisp world and actual sound files.
Modules that wish to use auditory icons should use these names, instead of actual file names.
As of Emacspeak 13.0, this module defines a themes
architecture for  auditory icons.
Sound files corresponding to a given theme are found in
appropriate subdirectories of emacspeak-sounds-directory

Automatically generated documentation
for commands defined in module  emacspeak-sounds.

@deffn {Interactive Command} emacspeak-audio-setup nil
@kbd{ control e ( }

Call appropriate audio environment set command.
@end deffn

@deffn {Interactive Command} emacspeak-play-all-icons nil
@kbd{Not bound to any key.}

Plays all defined icons and speaks their names.
@end deffn

@deffn {Interactive Command} emacspeak-set-auditory-icon-player nil
@kbd{ control e meta a }

Select  player used for producing auditory icons.
Recommended choices:

emacspeak-serve-auditory-icon for  the wave device.
emacspeak-queue-auditory-icon when using software TTS.
@end deffn

@deffn {Interactive Command} emacspeak-sounds-reset-local-player nil
@kbd{Not bound to any key.}

Ask Emacspeak to use a local audio player.
This lets me have Emacspeak switch to using audioplay on
solaris after I've used it for a while from a remote session
where it would use the more primitive speech-server based
audio player.
@end deffn

@deffn {Interactive Command} emacspeak-sounds-reset-sound nil
@kbd{Not bound to any key.}

Reload sound drivers.
@end deffn

@deffn {Interactive Command} emacspeak-sounds-select-theme nil
@kbd{ control e ) }

Select theme for auditory icons.
@end deffn

@deffn {Interactive Command} emacspeak-toggle-auditory-icons nil
@kbd{ control e control a }

Toggle use of auditory icons.
Optional interactive PREFIX arg toggles global value.
@end deffn

@node emacspeak-speak
@section emacspeak-speak

Commentary:
This module defines the core speech services used by emacspeak.
It depends on the speech server interface modules
It protects other parts of emacspeak
from becoming dependent on the speech server modules

Automatically generated documentation
for commands defined in module  emacspeak-speak.

@deffn {Interactive Command} emacspeak-audio-annotate-paragraphs nil
@kbd{Not bound to any key.}

Set property auditory-icon at front of all paragraphs.
@end deffn

@deffn {Interactive Command} emacspeak-blink-matching-open nil
@kbd{Not bound to any key.}

Move cursor momentarily to the beginning of the sexp before point.
Also display match context in minibuffer.
@end deffn

@deffn {Interactive Command} emacspeak-completion-pick-completion nil
@kbd{Not bound to any key.}

Pick completion and return safely where we came from.
@end deffn

@deffn {Interactive Command} emacspeak-completions-move-to-completion-group nil
@kbd{Not bound to any key.}

Move to group of choices beginning with character last
typed. If no such group exists, then we try to search for that
char, or dont move. 
@end deffn

@deffn {Interactive Command} emacspeak-dial-dtk nil
@kbd{ control e d t }

Prompt for and dial a phone NUMBER with the Dectalk.
@end deffn

@deffn {Interactive Command} emacspeak-execute-repeatedly nil
@kbd{Not bound to any key.}

Execute COMMAND repeatedly.
@end deffn

@deffn {Interactive Command} emacspeak-mark-backward-mark nil
@kbd{ <control up> }

Cycle backward through the mark ring.
@end deffn

@deffn {Interactive Command} emacspeak-owindow-next-line nil
@kbd{ ESCAPE <down> }

Move to the next line in the other window and speak it.
Numeric prefix arg COUNT can specify number of lines to move.
@end deffn

@deffn {Interactive Command} emacspeak-owindow-previous-line nil
@kbd{ ESCAPE <up> }

Move to the next line in the other window and speak it.
Numeric prefix arg COUNT specifies number of lines to move.
@end deffn

@deffn {Interactive Command} emacspeak-owindow-scroll-down nil
@kbd{ ESCAPE <prior> }

Scroll down  the window that command `other-window' would move to.
Speak the window contents after scrolling.
@end deffn

@deffn {Interactive Command} emacspeak-owindow-scroll-up nil
@kbd{ ESCAPE <next> }

Scroll up the window that command `other-window' would move to.
Speak the window contents after scrolling.
@end deffn

@deffn {Interactive Command} emacspeak-owindow-speak-line nil
@kbd{ ESCAPE <select> }

Speak the current line in the other window.
@end deffn

@deffn {Interactive Command} emacspeak-read-next-line nil
@kbd{ control e <down> }

Read next line, specified by an offset, without moving.
Default is to read the next line. 
@end deffn

@deffn {Interactive Command} emacspeak-read-next-word nil
@kbd{Not bound to any key.}

Read next word, specified as a numeric  arg, without moving.
Default is to read the next word. 
@end deffn

@deffn {Interactive Command} emacspeak-read-previous-line nil
@kbd{ control e <up> }

Read previous line, specified by an offset, without moving.
Default is to read the previous line. 
@end deffn

@deffn {Interactive Command} emacspeak-read-previous-word nil
@kbd{Not bound to any key.}

Read previous word, specified as a prefix arg, without moving.
Default is to read the previous word. 
@end deffn

@deffn {Interactive Command} emacspeak-search nil
@kbd{ <search> }

Call search defined in <search>.
@end deffn

@deffn {Interactive Command} emacspeak-silence nil
@kbd{ <silence> }

Silence is golden. Stop speech, and pause/resume any media
streams.
Runs `emacspeak-silence-hook' which can be used to configure
which media players get silenced or paused/resumed.
@end deffn

@deffn {Interactive Command} emacspeak-speak-and-skip-extent-upto-char nil
@kbd{Not bound to any key.}

Search forward from point until we hit char.
Speak text between point and the char we hit.
@end deffn

@deffn {Interactive Command} emacspeak-speak-and-skip-extent-upto-this-char nil
@kbd{Not bound to any key.}

Speak extent delimited by point and last character typed.
@end deffn

@deffn {Interactive Command} emacspeak-speak-browse-buffer nil
@kbd{ control e , }

Browse current buffer.
Default is to speak chunk having current personality.
Interactive prefix arg `browse'  repeatedly browses  through
  chunks having same personality as the current text chunk.
@end deffn

@deffn {Interactive Command} emacspeak-speak-buffer nil
@kbd{ control e b }

Speak current buffer  contents.
With prefix ARG, speaks the rest of the buffer from point.
Negative prefix arg speaks from start of buffer to point.
 If voice lock mode is on, the paragraphs in the buffer are
voice annotated first,  see command `emacspeak-speak-voice-annotate-paragraphs'.
@end deffn

@deffn {Interactive Command} emacspeak-speak-buffer-filename nil
@kbd{ control e f }

Speak name of file being visited in current buffer.
Speak default directory if invoked in a dired buffer,
or when the buffer is not visiting any file.
Interactive prefix arg `filename' speaks only the final path
component.
The result is put in the kill ring for convenience.
@end deffn

@deffn {Interactive Command} emacspeak-speak-buffer-interactively nil
@kbd{ control e  cap B  }

Speak the start of, rest of, or the entire buffer.
's' to speak the start.
'r' to speak the rest.
any other key to speak entire buffer.
@end deffn

@deffn {Interactive Command} emacspeak-speak-char nil
@kbd{ control e c }

Speak character under point.
Pronounces character phonetically unless  called with a PREFIX arg.
@end deffn

@deffn {Interactive Command} emacspeak-speak-char-name nil
@kbd{Not bound to any key.}

tell me what this is
@end deffn

@deffn {Interactive Command} emacspeak-speak-comint-send-input nil
@kbd{Not bound to any key.}

Causes output to be spoken i.e., as if comint autospeak were turned
on.
@end deffn

@deffn {Interactive Command} emacspeak-speak-completions-if-available nil
@kbd{Not bound to any key.}

Speak completions if available.
@end deffn

@deffn {Interactive Command} emacspeak-speak-continuously nil
@kbd{ control e RETURN }

Speak a buffer continuously.
First prompts using the minibuffer for the kind of action to
perform after speaking each chunk.  E.G.  speak a line at a time
etc.  Speaking commences at current buffer position.  Pressing
C-g breaks out, leaving point on last chunk that
was spoken.  Any other key continues to speak the buffer.
@end deffn

@deffn {Interactive Command} emacspeak-speak-current-column nil
@kbd{ control e = }

Speak the current column.
@end deffn

@deffn {Interactive Command} emacspeak-speak-current-field nil
@kbd{ control e . }

Speak current field.
@end deffn

@deffn {Interactive Command} emacspeak-speak-current-kill nil
@kbd{ control e k }

Speak the current kill entry.
This is the text that will be yanked in by the next C-y.
Prefix numeric arg, COUNT, specifies that the text that will be yanked as a
result of a
C-y  followed by count-1 M-y
be spoken.
 The kill number that is spoken says what numeric prefix arg to give
to command yank.
@end deffn

@deffn {Interactive Command} emacspeak-speak-current-mark nil
@kbd{ control e control @@ }

Speak the line containing the mark.
With no argument, speaks the
line containing the mark--this is where `exchange-point-and-mark'
C-x C-x would jump.  Numeric prefix arg 'COUNT' speaks
line containing mark 'n' where 'n' is one less than the number of
times one has to jump using `set-mark-command' to get to this marked
position.  The location of the mark is indicated by an aural highlight
achieved by a change in voice personality.
@end deffn

@deffn {Interactive Command} emacspeak-speak-current-percentage nil
@kbd{ control e % }

Announce the percentage into the current buffer.
@end deffn

@deffn {Interactive Command} emacspeak-speak-current-window nil
@kbd{Not bound to any key.}

Speak contents of current window.
Speaks entire window irrespective of point.
@end deffn

@deffn {Interactive Command} emacspeak-speak-display-char nil
@kbd{Not bound to any key.}

Display char under point using current speech display table.
Behavior is the same as command `emacspeak-speak-char'
bound to C-e c
for characters in the range 0--127.
Optional argument PREFIX  specifies that the character should be spoken phonetically.
@end deffn

@deffn {Interactive Command} emacspeak-speak-face-interval-and-move nil
@kbd{Not bound to any key.}

Speaks region delimited by text in current face, and moves past the chunk.
@end deffn

@deffn {Interactive Command} emacspeak-speak-front-of-buffer nil
@kbd{Not bound to any key.}

Speak   the buffer from start to   point
@end deffn

@deffn {Interactive Command} emacspeak-speak-header-line nil
@kbd{ control e SPACE }

Speak header line if set.
@end deffn

@deffn {Interactive Command} emacspeak-speak-help nil
@kbd{ control e h }

Speak help buffer if one present.
With prefix arg, speaks the rest of the buffer from point.
Negative prefix arg speaks from start of buffer to point.
@end deffn

@deffn {Interactive Command} emacspeak-speak-help-interactively nil
@kbd{Not bound to any key.}

Speak the start of, rest of, or the entire help.
's' to speak the start.
'r' to speak the rest.
any other key to speak entire help.
@end deffn

@deffn {Interactive Command} emacspeak-speak-hostname nil
@kbd{ control e meta h }

Speak host name.
@end deffn

@deffn {Interactive Command} emacspeak-speak-line nil
@kbd{ control e l }

Speaks current line.  With prefix ARG, speaks the rest of the line
from point.  Negative prefix optional arg speaks from start of line to
point.  Voicifies if option `voice-lock-mode' is on.  Indicates
indentation with a tone if audio indentation is in use.  Indicates
position of point with an aural highlight if option
`emacspeak-show-point' is turned on --see command
`emacspeak-show-point' bound to M-x emacspeak-show-point.  Lines that
start hidden blocks of text, e.g.  outline header lines, or header
lines of blocks created by command `emacspeak-hide-or-expose-block'
are indicated with auditory icon ellipses.
@end deffn

@deffn {Interactive Command} emacspeak-speak-line-interactively nil
@kbd{ control e  cap L  }

Speak the start of, rest of, or the entire line.
's' to speak the start.
'r' to speak the rest.
any other key to speak entire line.
@end deffn

@deffn {Interactive Command} emacspeak-speak-line-number nil
@kbd{ control e control l }

Print the current buffer line number and narrowed line number of point.

(fn)
@end deffn

@deffn {Interactive Command} emacspeak-speak-line-set-column-filter nil
@kbd{ control e | }

Set up filter for selectively speaking or ignoring portions of lines.
The filter is specified as a list of pairs.
For example, to filter  columns 1 -- 10 and 20 -- 25,
specify filter as
((0 9) (20 25)). Filter settings are persisted across sessions.  A
persisted filter is used as the default when prompting for a filter.
This allows one to accumulate a set of filters for specific files like
/var/adm/messages and /var/adm/maillog over time.
Option emacspeak-speak-line-invert-filter determines
the sense of the filter. 
@end deffn

@deffn {Interactive Command} emacspeak-speak-load-directory-settings nil
@kbd{Not bound to any key.}

Load a directory specific Emacspeak settings file.
This is typically used to load up settings that are specific to
an electronic book consisting of many files in the same
directory.
@end deffn

@deffn {Interactive Command} emacspeak-speak-message-again nil
@kbd{ control e a }

Speak the last message from Emacs once again.
The message is also placed in the kill ring for convenient yanking
if `emacspeak-speak-message-again-should-copy-to-kill-ring' is set.
@end deffn

@deffn {Interactive Command} emacspeak-speak-message-at-time nil
@kbd{ control e @@ }

Set up ring-at-time to speak message at specified time.
Provides simple stop watch functionality in addition to other things.
See documentation for command run-at-time for details on time-spec.
@end deffn

@deffn {Interactive Command} emacspeak-speak-minibuffer nil
@kbd{Not bound to any key.}

Speak the minibuffer contents
 With prefix arg, speaks the rest of the buffer from point.
Negative prefix arg speaks from start of buffer to point.
@end deffn

@deffn {Interactive Command} emacspeak-speak-minor-mode-line nil
@kbd{ control e  cap M  }

Speak the minor mode-information.
@end deffn

@deffn {Interactive Command} emacspeak-speak-mode-line nil
@kbd{ control e m }

Speak the mode-line.
Speaks header-line if that is set when called non-interactively.
Interactive prefix arg speaks buffer info.
@end deffn

@deffn {Interactive Command} emacspeak-speak-next-face-chunk nil
@kbd{Not bound to any key.}

Moves to the front of next chunk having current face.
Speak that chunk after moving.
@end deffn

@deffn {Interactive Command} emacspeak-speak-next-field nil
@kbd{ control e > }

Move to and speak next field.
@end deffn

@deffn {Interactive Command} emacspeak-speak-next-personality-chunk nil
@kbd{Not bound to any key.}

Moves to the front of next chunk having current personality.
Speak that chunk after moving.
@end deffn

@deffn {Interactive Command} emacspeak-speak-next-window nil
@kbd{ control e control n }

Speak the next window.
@end deffn

@deffn {Interactive Command} emacspeak-speak-other-buffer nil
@kbd{ control e meta b }

Speak specified buffer.
Useful to listen to a buffer without switching  contexts.
@end deffn

@deffn {Interactive Command} emacspeak-speak-other-window nil
@kbd{Not bound to any key.}

Speak contents of `other' window.
Speaks entire window irrespective of point.
Semantics  of `other' is the same as for the builtin Emacs command
`other-window'.
Optional argument ARG  specifies `other' window to speak.
@end deffn

@deffn {Interactive Command} emacspeak-speak-page nil
@kbd{ control e [ }

Speak a page.
With prefix ARG, speaks rest of current page.
Negative prefix arg will read from start of current page to point.
If option  `voice-lock-mode' is on, then it will use any defined personality.
@end deffn

@deffn {Interactive Command} emacspeak-speak-page-interactively nil
@kbd{ control e ] }

Speak the start of, rest of, or the entire page.
's' to speak the start.
'r' to speak the rest.
any other key to speak entire page.
@end deffn

@deffn {Interactive Command} emacspeak-speak-paragraph nil
@kbd{ control e @{   control e p }

Speak paragraph.
With prefix arg, speaks rest of current paragraph.
Negative prefix arg will read from start of current paragraph to point.
If voice-lock-mode is on, then it will use any defined personality. 
@end deffn

@deffn {Interactive Command} emacspeak-speak-paragraph-interactively nil
@kbd{ control e  cap P  }

Speak the start of, rest of, or the entire paragraph.
's' to speak the start.
'r' to speak the rest.
any other key to speak entire paragraph.
@end deffn

@deffn {Interactive Command} emacspeak-speak-preceding-char nil
@kbd{Not bound to any key.}

Speak character before point.
@end deffn

@deffn {Interactive Command} emacspeak-speak-predefined-window nil
@kbd{ control e 9   control e 8   control e 7   control e 6   control e 5   control e 4   control e 3   control e 2   control e 1   control e 0 }

Speak one of the first 10 windows on the screen.
Speaks entire window irrespective of point.
In general, you'll never have Emacs split the screen into more than
two or three.
Argument ARG determines the 'other' window to speak.
Semantics  of `other' is the same as for the builtin Emacs command
`other-window'.
@end deffn

@deffn {Interactive Command} emacspeak-speak-previous-face-chunk nil
@kbd{Not bound to any key.}

Moves to the front of previous chunk having current face.
Speak that chunk after moving.
@end deffn

@deffn {Interactive Command} emacspeak-speak-previous-field nil
@kbd{ control e < }

Move to previous field and speak it.
@end deffn

@deffn {Interactive Command} emacspeak-speak-previous-personality-chunk nil
@kbd{Not bound to any key.}

Moves to the front of previous chunk having current personality.
Speak that chunk after moving.
@end deffn

@deffn {Interactive Command} emacspeak-speak-previous-window nil
@kbd{ control e control p }

Speak the previous window.
@end deffn

@deffn {Interactive Command} emacspeak-speak-rectangle nil
@kbd{ control e  cap R  }

Speak a rectangle of text.
Rectangle is delimited by point and mark.
When call from a program,
arguments specify the START and END of the rectangle.
@end deffn

@deffn {Interactive Command} emacspeak-speak-region nil
@kbd{ control e r }

Speak region.
Argument START  and END specify region to speak.
@end deffn

@deffn {Interactive Command} emacspeak-speak-rest-of-buffer nil
@kbd{ control e n }

Speak remainder of the buffer starting at point
@end deffn

@deffn {Interactive Command} emacspeak-speak-sentence nil
@kbd{Not bound to any key.}

Speak current sentence.
With prefix ARG, speaks the rest of the sentence  from point.
Negative prefix arg speaks from start of sentence to point.
@end deffn

@deffn {Interactive Command} emacspeak-speak-set-display-table nil
@kbd{Not bound to any key.}

Sets up buffer specific speech display table that controls how
special characters are spoken. Interactive prefix argument causes
setting to be global.
@end deffn

@deffn {Interactive Command} emacspeak-speak-sexp nil
@kbd{Not bound to any key.}

Speak current sexp.
With prefix ARG, speaks the rest of the sexp  from point.
Negative prefix arg speaks from start of sexp to point.
If option  `voice-lock-mode' is on, then uses the personality.
@end deffn

@deffn {Interactive Command} emacspeak-speak-sexp-interactively nil
@kbd{ control e " }

Speak the start of, rest of, or the entire sexp.
's' to speak the start.
'r' to speak the rest.
any other key to speak entire sexp.
@end deffn

@deffn {Interactive Command} emacspeak-speak-show-active-network-interfaces nil
@kbd{ control e  cap I  }

Shows all active network interfaces in the echo area.
With interactive prefix argument ADDRESS it prompts for a
specific interface and shows its address. The address is
also copied to the kill ring for convenient yanking.
@end deffn

@deffn {Interactive Command} emacspeak-speak-skim-buffer nil
@kbd{Not bound to any key.}

Skim the current buffer  a paragraph at a time.
@end deffn

@deffn {Interactive Command} emacspeak-speak-skim-next-paragraph nil
@kbd{Not bound to any key.}

Skim next paragraph.
@end deffn

@deffn {Interactive Command} emacspeak-speak-skim-paragraph nil
@kbd{Not bound to any key.}

Skim paragraph.
Skimming a paragraph results in the speech speeding up after
the first clause.
Speech is scaled by the value of dtk-speak-skim-scale
@end deffn

@deffn {Interactive Command} emacspeak-speak-spaces-at-point nil
@kbd{ control e CONTROL meta @@ }

Speak the white space at point.
@end deffn

@deffn {Interactive Command} emacspeak-speak-spell-current-word nil
@kbd{Not bound to any key.}

Spell word at  point.
@end deffn

@deffn {Interactive Command} emacspeak-speak-this-face-chunk nil
@kbd{Not bound to any key.}

Speak chunk of text around point that has current face.
@end deffn

@deffn {Interactive Command} emacspeak-speak-this-personality-chunk nil
@kbd{Not bound to any key.}

Speak chunk of text around point that has current
personality.
@end deffn

@deffn {Interactive Command} emacspeak-speak-time nil
@kbd{ control e t }

Speak the time.
Optional interactive prefix arg `C-u'invokes world clock.
Timezone is specified using minibuffer completion.
Second interactive prefix sets clock to new timezone.
@end deffn

@deffn {Interactive Command} emacspeak-speak-version nil
@kbd{ control e  cap V  }

Announce version information for running emacspeak.
@end deffn

@deffn {Interactive Command} emacspeak-speak-voice-annotate-paragraphs nil
@kbd{Not bound to any key.}

Locate paragraphs and voice annotate the first word.
Here, paragraph is taken to mean a chunk of text preceded by a blank line.
Useful to do this before you listen to an entire buffer.
@end deffn

@deffn {Interactive Command} emacspeak-speak-window-information nil
@kbd{ control e control w }

Speaks information about current window.
@end deffn

@deffn {Interactive Command} emacspeak-speak-word nil
@kbd{ control e w }

Speak current word.
With prefix ARG, speaks the rest of the word from point.
Negative prefix arg speaks from start of word to point.
If executed  on the same buffer position a second time, the word is
spelt instead of being spoken.
@end deffn

@deffn {Interactive Command} emacspeak-speak-word-interactively nil
@kbd{Not bound to any key.}

Speak the start of, rest of, or the entire word.
's' to speak the start.
'r' to speak the rest.
any other key to speak entire word.
@end deffn

@deffn {Interactive Command} emacspeak-speak-world-clock nil
@kbd{Not bound to any key.}

Display current date and time  for specified zone.
Optional second arg `set' sets the TZ environment variable as well.
@end deffn

@deffn {Interactive Command} emacspeak-switch-to-reference-buffer nil
@kbd{Not bound to any key.}

Switch back to buffer that generated completions.
@end deffn

@deffn {Interactive Command} emacspeak-toggle-action-mode nil
@kbd{Not bound to any key.}

Toggle state of  Emacspeak  action mode.
Interactive PREFIX arg means toggle  the global default value, and then set the
current local  value to the result.
@end deffn

@deffn {Interactive Command} emacspeak-toggle-audio-indentation nil
@kbd{ control e d i }

Toggle state of  Emacspeak  audio indentation.
Interactive PREFIX arg means toggle  the global default value, and then set the
current local  value to the result.
Specifying the method of indentation as `tones'
results in the Dectalk producing a tone whose length is a function of the
line's indentation.  Specifying `speak'
results in the number of initial spaces being spoken.
@end deffn

@deffn {Interactive Command} emacspeak-toggle-character-echo nil
@kbd{ control e d k }

Toggle state of  Emacspeak  character echo.
Interactive PREFIX arg means toggle  the global default value, and then set the
current local  value to the result.
@end deffn

@deffn {Interactive Command} emacspeak-toggle-comint-autospeak nil
@kbd{ control e control q }

Toggle state of Emacspeak comint autospeak.
When turned on, comint output is automatically spoken.  Turn this on if
you want your shell to speak its results.  Interactive
PREFIX arg means toggle the global default value, and then
set the current local value to the result.
@end deffn

@deffn {Interactive Command} emacspeak-toggle-header-line nil
@kbd{Not bound to any key.}

Toggle Emacspeak's default header line.
@end deffn

@deffn {Interactive Command} emacspeak-toggle-line-echo nil
@kbd{ control e d l }

Toggle state of  Emacspeak  line echo.
Interactive PREFIX arg means toggle  the global default value, and then set the
current local  value to the result.
@end deffn

@deffn {Interactive Command} emacspeak-toggle-mail-alert nil
@kbd{ control e meta m }

Toggle state of  Emacspeak  mail alert.
Interactive PREFIX arg means toggle  the global default value, and then set the
current local  value to the result.
Turning on this option results in Emacspeak producing an auditory icon
indicating the arrival  of new mail when displaying the mode line.
@end deffn

@deffn {Interactive Command} emacspeak-toggle-show-point nil
@kbd{ control e control d }

Toggle state of  Emacspeak-show-point.
Interactive PREFIX arg means toggle  the global default value, and then set the
current local  value to the result.
@end deffn

@deffn {Interactive Command} emacspeak-toggle-speak-line-invert-filter nil
@kbd{ control e \ }

Toggle state of   how column filter is interpreted.
Interactive PREFIX arg means toggle  the global default value, and then set the
current local  value to the result.
@end deffn

@deffn {Interactive Command} emacspeak-toggle-speak-messages nil
@kbd{ control e q }

Toggle the state of whether emacspeak echoes messages.
@end deffn

@deffn {Interactive Command} emacspeak-toggle-word-echo nil
@kbd{ control e d w }

Toggle state of  Emacspeak  word echo.
Interactive PREFIX arg means toggle  the global default value, and then set the
current local  value to the result.
@end deffn

@deffn {Interactive Command} emacspeak-use-customized-blink-paren nil
@kbd{Not bound to any key.}

A customized blink-paren to speak  matching opening paren.
We need to call this in case Emacs is anal and loads its own
builtin blink-paren function which does not talk.
@end deffn

@deffn {Interactive Command} emacspeak-voiceify-rectangle nil
@kbd{Not bound to any key.}

Voicify the current rectangle.
When calling from a program,arguments are
START END personality
Prompts for PERSONALITY  with completion when called interactively.
@end deffn

@deffn {Interactive Command} emacspeak-voiceify-region nil
@kbd{Not bound to any key.}

Voicify the current region.
When calling from a program,arguments are
START END personality.
Prompts for PERSONALITY  with completion when called interactively.
@end deffn

@deffn {Interactive Command} emacspeak-zap-tts nil
@kbd{ control e d z }

Send this command to the TTS directly.
@end deffn

@node emacspeak-speedbar
@section emacspeak-speedbar

Commentary:
This module advises speedbar.el for use with Emacs.  The
latest speedbar can be obtained from
ftp://ftp.ultranet.com/pub/zappo/ This module ensures
that speedbar works smoothly outside a windowing system
in addition to speech enabling all interactive
commands. Emacspeak also adds an Emacspeak environment
specific entry point to speedbar
--emacspeak-speedbar-goto-speedbar-- and binds this

Automatically generated documentation
for commands defined in module  emacspeak-speedbar.

@deffn {Interactive Command} emacspeak-speedbar-click nil
@kbd{Not bound to any key.}

Does the equivalent of the mouse click from the keyboard
@end deffn

@deffn {Interactive Command} emacspeak-speedbar-goto-speedbar nil
@kbd{Not bound to any key.}

Switch to the speedbar
@end deffn

@node emacspeak-sudoku
@section emacspeak-sudoku

Commentary:
Playing SuDoku using speech output.
Written to discover what type of feedback one needs for  this
task.
See http://emacspeak.blogspot.com/2006/02/playing-sudoku-using-auditory-feedback.html

Automatically generated documentation
for commands defined in module  emacspeak-sudoku.

@deffn {Interactive Command} emacspeak-sudoku-board-columns-summarize nil
@kbd{Not bound to any key.}

Summarize columns --- speaks number of remaining cells.
@end deffn

@deffn {Interactive Command} emacspeak-sudoku-board-distribution-summarize nil
@kbd{Not bound to any key.}

Shows distribution of filled numbers.
@end deffn

@deffn {Interactive Command} emacspeak-sudoku-board-rows-summarize nil
@kbd{Not bound to any key.}

Summarize rows --- speaks number of remaining cells.
@end deffn

@deffn {Interactive Command} emacspeak-sudoku-board-sub-squares-summarize nil
@kbd{Not bound to any key.}

Summarize sub-squares --- speaks number of remaining cells.
@end deffn

@deffn {Interactive Command} emacspeak-sudoku-board-summarizer nil
@kbd{Not bound to any key.}

Dispatch to  appropriate summarizer.

d   Number Distribution
r   Row Distribution
c   Column Distribution
s   Sub-square Distribution.

@end deffn

@deffn {Interactive Command} emacspeak-sudoku-down-sub-square nil
@kbd{Not bound to any key.}

Move to top-left corner of  sub-square below current one.
@end deffn

@deffn {Interactive Command} emacspeak-sudoku-erase-current-column nil
@kbd{Not bound to any key.}

Erase current column.
@end deffn

@deffn {Interactive Command} emacspeak-sudoku-erase-current-row nil
@kbd{Not bound to any key.}

Erase current row.
@end deffn

@deffn {Interactive Command} emacspeak-sudoku-erase-current-sub-square nil
@kbd{Not bound to any key.}

Erase current sub-square.
@end deffn

@deffn {Interactive Command} emacspeak-sudoku-hint nil
@kbd{Not bound to any key.}

Provide hint for current cell.
@end deffn

@deffn {Interactive Command} emacspeak-sudoku-history-pop nil
@kbd{Not bound to any key.}

Pop saved state off stack and redraw board.
@end deffn

@deffn {Interactive Command} emacspeak-sudoku-history-push nil
@kbd{Not bound to any key.}

Push current state on to history stack.
@end deffn

@deffn {Interactive Command} emacspeak-sudoku-how-many-remaining nil
@kbd{Not bound to any key.}

Speak number of remaining squares to fill.
@end deffn

@deffn {Interactive Command} emacspeak-sudoku-next-sub-square nil
@kbd{Not bound to any key.}

Move to top-left corner of next sub-square.
@end deffn

@deffn {Interactive Command} emacspeak-sudoku-previous-sub-square nil
@kbd{Not bound to any key.}

Move to top-left corner of previous sub-square.
@end deffn

@deffn {Interactive Command} emacspeak-sudoku-speak-current-cell-coordinates nil
@kbd{Not bound to any key.}

speak current cell coordinates.
@end deffn

@deffn {Interactive Command} emacspeak-sudoku-speak-current-cell-value nil
@kbd{Not bound to any key.}

Speak value in current cell.
@end deffn

@deffn {Interactive Command} emacspeak-sudoku-speak-current-column nil
@kbd{Not bound to any key.}

Speak current column.
@end deffn

@deffn {Interactive Command} emacspeak-sudoku-speak-current-row nil
@kbd{Not bound to any key.}

Speak current row.
@end deffn

@deffn {Interactive Command} emacspeak-sudoku-speak-current-sub-square nil
@kbd{Not bound to any key.}

Speak current sub-square.
@end deffn

@deffn {Interactive Command} emacspeak-sudoku-speak-remaining-in-column nil
@kbd{Not bound to any key.}

Speaks number of remaining cells in current column.
@end deffn

@deffn {Interactive Command} emacspeak-sudoku-speak-remaining-in-row nil
@kbd{Not bound to any key.}

Speaks number of remaining cells in current row.
@end deffn

@deffn {Interactive Command} emacspeak-sudoku-speak-remaining-in-sub-square nil
@kbd{Not bound to any key.}

Speaks number of remaining cells in current sub-square.
@end deffn

@deffn {Interactive Command} emacspeak-sudoku-up-sub-square nil
@kbd{Not bound to any key.}

Move to top-left corner of  sub-square above current one.
@end deffn

@node emacspeak-table-ui
@section emacspeak-table-ui

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-table-ui.

@deffn {Interactive Command} emacspeak-table-copy-current-element-to-kill-ring nil
@kbd{Not bound to any key.}

Copy current table element to kill ring.
@end deffn

@deffn {Interactive Command} emacspeak-table-copy-current-element-to-register nil
@kbd{Not bound to any key.}

Copy current table element to specified register.
@end deffn

@deffn {Interactive Command} emacspeak-table-copy-to-clipboard nil
@kbd{Not bound to any key.}

Copy table in current buffer to the table clipboard.
Current buffer must be in emacspeak-table mode.
@end deffn

@deffn {Interactive Command} emacspeak-table-display-table-in-region nil
@kbd{ control e TAB }

Recognize tabular data in current region and display it in table
browsing mode in a a separate buffer.
emacspeak table mode is designed to let you browse tabular data using
all the power of the two-dimensional spatial layout while giving you
sufficient contextual information.  The tables subdirectory of the
emacspeak distribution contains some sample tables --these are the
CalTrain schedules.  Execute command `describe-mode' bound to
C-h m in a buffer that is in emacspeak table mode to read
the documentation on the table browser.
@end deffn

@deffn {Interactive Command} emacspeak-table-find-csv-file nil
@kbd{Not bound to any key.}

Process a csv (comma separated values) file.
The processed  data and presented using emacspeak table navigation. 
@end deffn

@deffn {Interactive Command} emacspeak-table-find-file nil
@kbd{ control e control t }

Open a file containing table data and display it in table mode.
emacspeak table mode is designed to let you browse tabular data using
all the power of the two-dimensional spatial layout while giving you
sufficient contextual information.  The etc/tables subdirectory of the
emacspeak distribution contains some sample tables --these are the
CalTrain schedules.  Execute command `describe-mode' bound to
C-h m in a buffer that is in emacspeak table mode to read
the documentation on the table browser.
@end deffn

@deffn {Interactive Command} emacspeak-table-get-entry-with-headers nil
@kbd{Not bound to any key.}

Return   both row and column header and table element
@end deffn

@deffn {Interactive Command} emacspeak-table-goto nil
@kbd{Not bound to any key.}

Prompt for a table cell coordinates and jump to it.
@end deffn

@deffn {Interactive Command} emacspeak-table-goto-bottom nil
@kbd{Not bound to any key.}

Goes to the bottom of the current column.
@end deffn

@deffn {Interactive Command} emacspeak-table-goto-left nil
@kbd{Not bound to any key.}

Goes to the left of the current row.
@end deffn

@deffn {Interactive Command} emacspeak-table-goto-right nil
@kbd{Not bound to any key.}

Goes to the right of the current row.
@end deffn

@deffn {Interactive Command} emacspeak-table-goto-top nil
@kbd{Not bound to any key.}

Goes to the top of the current column.
@end deffn

@deffn {Interactive Command} emacspeak-table-next-column nil
@kbd{Not bound to any key.}

Move to the next column if possible
@end deffn

@deffn {Interactive Command} emacspeak-table-next-row nil
@kbd{Not bound to any key.}

Move to the next row if possible
@end deffn

@deffn {Interactive Command} emacspeak-table-paste-from-clipboard nil
@kbd{Not bound to any key.}

Paste the emacspeak table clipboard into the current buffer.
Use the major  mode of this buffer to  decide what kind of table
markup to use.
@end deffn

@deffn {Interactive Command} emacspeak-table-previous-column nil
@kbd{Not bound to any key.}

Move to the previous column  if possible
@end deffn

@deffn {Interactive Command} emacspeak-table-previous-row nil
@kbd{Not bound to any key.}

Move to the previous row if possible
@end deffn

@deffn {Interactive Command} emacspeak-table-search nil
@kbd{Not bound to any key.}

Search the table for matching elements.  Interactively prompts for
row or column to search and pattern to look for.    If there is a match, makes
the matching cell current. When called from a program, `what' can
  be either `row' or `column'.
@end deffn

@deffn {Interactive Command} emacspeak-table-search-column nil
@kbd{Not bound to any key.}

Search in current table column.
@end deffn

@deffn {Interactive Command} emacspeak-table-search-headers nil
@kbd{Not bound to any key.}

Search the table row or column headers.  Interactively prompts for
row or column to search and pattern to look for.  If there is a
match, makes the matching row or column current.
@end deffn

@deffn {Interactive Command} emacspeak-table-search-row nil
@kbd{Not bound to any key.}

Search in current table row.
@end deffn

@deffn {Interactive Command} emacspeak-table-select-automatic-speaking-method nil
@kbd{Not bound to any key.}

Interactively select the kind of automatic speech to produce when
browsing table elements
@end deffn

@deffn {Interactive Command} emacspeak-table-sort-on-current-column nil
@kbd{Not bound to any key.}

Sort table on current column. 
@end deffn

@deffn {Interactive Command} emacspeak-table-speak-both-headers-and-element nil
@kbd{Not bound to any key.}

Speak  both row and column header and table element
@end deffn

@deffn {Interactive Command} emacspeak-table-speak-column-filtered nil
@kbd{Not bound to any key.}

Speaks a table column after applying a specified column filter.
Optional prefix arg prompts for a new filter.
@end deffn

@deffn {Interactive Command} emacspeak-table-speak-column-header-and-element nil
@kbd{Not bound to any key.}

Speak  column header and table element
@end deffn

@deffn {Interactive Command} emacspeak-table-speak-coordinates nil
@kbd{Not bound to any key.}

Speak current table coordinates.
@end deffn

@deffn {Interactive Command} emacspeak-table-speak-current-element nil
@kbd{Not bound to any key.}

Speak current table element
@end deffn

@deffn {Interactive Command} emacspeak-table-speak-dimensions nil
@kbd{Not bound to any key.}

Speak current table dimensions.
@end deffn

@deffn {Interactive Command} emacspeak-table-speak-row-filtered nil
@kbd{Not bound to any key.}

Speaks a table row after applying a specified row filter.
Optional prefix arg prompts for a new filter.
@end deffn

@deffn {Interactive Command} emacspeak-table-speak-row-header-and-element nil
@kbd{Not bound to any key.}

Speak  row header and table element
@end deffn

@deffn {Interactive Command} emacspeak-table-ui-filter-load nil
@kbd{Not bound to any key.}

Load saved filter settings.
@end deffn

@deffn {Interactive Command} emacspeak-table-ui-filter-save nil
@kbd{Not bound to any key.}

Save out filter settings.
@end deffn

@deffn {Interactive Command} emacspeak-table-view-csv-buffer nil
@kbd{Not bound to any key.}

Process a csv (comma separated values) data.
The processed  data and presented using emacspeak table navigation. 
@end deffn

@node emacspeak-tabulate
@section emacspeak-tabulate

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-tabulate.

@deffn {Interactive Command} emacspeak-tabulate-region nil
@kbd{ control e i }

Voicifies the white-space of a table if one found.  Optional interactive prefix
arg mark-fields specifies if the header row information is used to mark fields
in the white-space.
@end deffn

@node emacspeak-tapestry
@section emacspeak-tapestry

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-tapestry.

@deffn {Interactive Command} emacspeak-tapestry-describe-tapestry nil
@kbd{ control e meta t }

Describe the current layout of visible buffers in current frame.
Use interactive prefix arg to get coordinate positions of the
displayed buffers.
@end deffn

@deffn {Interactive Command} emacspeak-tapestry-select-window-by-name nil
@kbd{ control e  cap W  }

Select window by the name of the buffer it displays.
This is useful when using modes like ECB or the new GDB UI where
  you want to preserve the window layout 
but quickly switch to a window by name.
@end deffn

@node emacspeak-tar
@section emacspeak-tar

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-tar.

@deffn {Interactive Command} emacspeak-tar-speak-file-date nil
@kbd{Not bound to any key.}

Speak date of file current entry 
@end deffn

@deffn {Interactive Command} emacspeak-tar-speak-file-permissions nil
@kbd{Not bound to any key.}

Speak permissions of file current entry 
@end deffn

@deffn {Interactive Command} emacspeak-tar-speak-file-size nil
@kbd{Not bound to any key.}

Speak size of file current entry 
@end deffn

@node emacspeak-tetris
@section emacspeak-tetris

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-tetris.

@deffn {Interactive Command} emacspeak-tetris-goto-bottom-row nil
@kbd{Not bound to any key.}

Move to and speak bottom row
@end deffn

@deffn {Interactive Command} emacspeak-tetris-goto-top-row nil
@kbd{Not bound to any key.}

Move to and speak the top row
@end deffn

@deffn {Interactive Command} emacspeak-tetris-speak-column nil
@kbd{Not bound to any key.}

Speak  column --default is to speak current column
@end deffn

@deffn {Interactive Command} emacspeak-tetris-speak-coordinates nil
@kbd{Not bound to any key.}

Speak current position
@end deffn

@deffn {Interactive Command} emacspeak-tetris-speak-current-shape nil
@kbd{Not bound to any key.}

Speak current shape
@end deffn

@deffn {Interactive Command} emacspeak-tetris-speak-current-shape-and-coordinates nil
@kbd{Not bound to any key.}

Speak shape orientation and coordinates
@end deffn

@deffn {Interactive Command} emacspeak-tetris-speak-next-shape nil
@kbd{Not bound to any key.}

Speak next shape
@end deffn

@deffn {Interactive Command} emacspeak-tetris-speak-row nil
@kbd{Not bound to any key.}

Speak current tetris row
@end deffn

@deffn {Interactive Command} emacspeak-tetris-speak-row-number nil
@kbd{Not bound to any key.}

Speak where on the tetris board we are
@end deffn

@deffn {Interactive Command} emacspeak-tetris-speak-score nil
@kbd{Not bound to any key.}

Speak the score
@end deffn

@deffn {Interactive Command} emacspeak-tetris-speak-x-coordinate nil
@kbd{Not bound to any key.}

Speak current position
@end deffn

@node emacspeak-tnt
@section emacspeak-tnt

Commentary:
Speech-enables TNT -- the Emacs AOL Instant Messenger
client 

Automatically generated documentation
for commands defined in module  emacspeak-tnt.

@deffn {Interactive Command} emacspeak-tnt-toggle-autospeak nil
@kbd{Not bound to any key.}

Toggle TNT autospeak for this chat session.
@end deffn

@node emacspeak-url-template
@section emacspeak-url-template

Commentary:
It is often useful to have ``parametrized hot list entries''
i.e., hotlist entries  that are ``templates'' for the
actual URL.
The user provides values for the parametrized portions
of the URL e.g. the date.
See @xref{URL Templates}, for details on the URL templates
that are presently defined.

Automatically generated documentation
for commands defined in module  emacspeak-url-template.

@deffn {Interactive Command} emacspeak-url-template-fetch nil
@kbd{ control e u }

Fetch a pre-defined resource.
Use Emacs completion to obtain a list of available resources.
Resources typically prompt for the relevant information
before completing the request.
Optional interactive prefix arg displays documentation for specified resource.
@end deffn

@deffn {Interactive Command} emacspeak-url-template-help nil
@kbd{Not bound to any key.}

Display documentation for  a URL template.
Use Emacs completion to obtain a list of available
resources.
@end deffn

@deffn {Interactive Command} emacspeak-url-template-load nil
@kbd{Not bound to any key.}

Load URL template resources from specified location.
@end deffn

@deffn {Interactive Command} emacspeak-url-template-save nil
@kbd{Not bound to any key.}

Save out url templates.
@end deffn

@node emacspeak-view
@section emacspeak-view

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-view.

@deffn {Interactive Command} emacspeak-view-line-to-top nil
@kbd{Not bound to any key.}

Moves current line to top of window
@end deffn

@node emacspeak-vm
@section emacspeak-vm

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-vm.

@deffn {Interactive Command} emacspeak-vm-browse-message nil
@kbd{Not bound to any key.}

Browse an email message --read it paragraph at a time. 
@end deffn

@deffn {Interactive Command} emacspeak-vm-catch-up-all-messages nil
@kbd{Not bound to any key.}

Mark all messages in folder to be deleted. Use with caution.
@end deffn

@deffn {Interactive Command} emacspeak-vm-locate-subject-line nil
@kbd{Not bound to any key.}

Locates the subject line in a message being read.
Useful when you're reading a message
that has been forwarded multiple times.
@end deffn

@deffn {Interactive Command} emacspeak-vm-mode-line nil
@kbd{Not bound to any key.}

VM mode line information. 
@end deffn

@deffn {Interactive Command} emacspeak-vm-next-button nil
@kbd{Not bound to any key.}

Move point to N buttons forward.
If N is negative, move backward instead.
@end deffn

@deffn {Interactive Command} emacspeak-vm-speak-labels nil
@kbd{Not bound to any key.}

Speak a message's labels
@end deffn

@deffn {Interactive Command} emacspeak-vm-speak-message nil
@kbd{Not bound to any key.}

Move point to the message body.
@end deffn

@deffn {Interactive Command} emacspeak-vm-yank-header nil
@kbd{Not bound to any key.}

Yank specified header into kill ring.
@end deffn

@node emacspeak-w3
@section emacspeak-w3

Commentary:
Ensure that speech support for W3 gets installed and
loaded correctly.
The emacs W3 browser comes with builtin support for
Emacspeak and ACSS

Automatically generated documentation
for commands defined in module  emacspeak-w3.

@deffn {Interactive Command} emacspeak-w3-curl-url-under-point nil
@kbd{Not bound to any key.}

Display contents of URL under point using Curl and W3.  The
document is displayed in a separate buffer. 
@end deffn

@deffn {Interactive Command} emacspeak-w3-customize-base-uri-pronunciation nil
@kbd{Not bound to any key.}

Defines custom buffer local pronunciation for base URI.
@end deffn

@deffn {Interactive Command} emacspeak-w3-do-onclick nil
@kbd{Not bound to any key.}

Do  onclick action.
@end deffn

@deffn {Interactive Command} emacspeak-w3-javascript-follow-link nil
@kbd{Not bound to any key.}

Follow URL hidden inside a javascript link
@end deffn

@deffn {Interactive Command} emacspeak-w3-jump-to-submit nil
@kbd{Not bound to any key.}

Jump to next available submit button.
@end deffn

@deffn {Interactive Command} emacspeak-w3-lynx-url-under-point nil
@kbd{Not bound to any key.}

Display contents of URL under point using LYNX.  The
document is displayed in a separate buffer. Note that the
hyperlinks in that display are not active-- this facility is
present only to help me iron out the remaining problems with
the table structure extraction code in W3.
@end deffn

@deffn {Interactive Command} emacspeak-w3-next-block nil
@kbd{Not bound to any key.}

Move by block level displays.
@end deffn

@deffn {Interactive Command} emacspeak-w3-next-doc-element nil
@kbd{Not bound to any key.}

Move forward  to the next document element.
Optional interactive prefix argument COUNT
specifies by how many eleemnts to move.
@end deffn

@deffn {Interactive Command} emacspeak-w3-next-parsed-item nil
@kbd{Not bound to any key.}

Move to and speak next parsed item.
@end deffn

@deffn {Interactive Command} emacspeak-w3-previous-doc-element nil
@kbd{Not bound to any key.}

Move back  to the previous document element.
Optional interactive prefix argument COUNT
specifies by how many eleemnts to move.
@end deffn

@deffn {Interactive Command} emacspeak-w3-show-anchor-class nil
@kbd{Not bound to any key.}

Display any class attributes set on corresponding anchor
element. 
@end deffn

@deffn {Interactive Command} emacspeak-w3-show-http-headers nil
@kbd{Not bound to any key.}

Show HTTP headers using lwp-request
@end deffn

@deffn {Interactive Command} emacspeak-w3-speak-next-block nil
@kbd{Not bound to any key.}

Move to next block and speak it.
@end deffn

@deffn {Interactive Command} emacspeak-w3-speak-next-element nil
@kbd{Not bound to any key.}

Speak next document element.
@end deffn

@deffn {Interactive Command} emacspeak-w3-speak-this-element nil
@kbd{Not bound to any key.}

Speak document element under point.
@end deffn

@deffn {Interactive Command} emacspeak-w3-toggle-table-borders nil
@kbd{Not bound to any key.}

Toggle drawing of W3 table borders
@end deffn

@node emacspeak-w3m
@section emacspeak-w3m

Commentary:

Automatically generated documentation
for commands defined in module  emacspeak-w3m.

@deffn {Interactive Command} emacspeak-m-player nil
@kbd{Not bound to any key.}

Play specified resource using m-player.
Optional prefix argument play-list interprets resource as a play-list.
Resource is a media resource or playlist containing media resources.
The player is placed in a buffer in emacspeak-m-player-mode.
@end deffn

@deffn {Interactive Command} emacspeak-w3m-preview-this-buffer nil
@kbd{Not bound to any key.}

Preview this buffer in w3m.
@end deffn

@node emacspeak-we
@section emacspeak-we

Commentary:
we is for webedit
Invoke XSLT to edit/transform Web pages before they get
rendered.
we makes emacspeak's webedit layer independent of a given
Emacs web browser like W3 or W3M
This module will use the abstraction provided by browse-url
to handle Web pages.
Module emacspeak-webutils provides the needed additional
abstractions not already covered by browse-url

Automatically generated documentation
for commands defined in module  emacspeak-we.

@deffn {Interactive Command} emacspeak-we-class-filter-and-follow nil
@kbd{Not bound to any key.}

Follow url and point, and filter the result by specified class.
Class can be set locally for a buffer, and overridden with an
interactive prefix arg. If there is a known rewrite url rule, that is
used as well.
@end deffn

@deffn {Interactive Command} emacspeak-we-class-filter-and-follow-link nil
@kbd{Not bound to any key.}

Follow url and point, and filter the result by specified class.
Class can be set locally for a buffer, and overridden with an
interactive prefix arg. If there is a known rewrite url rule, that is
used as well.
@end deffn

@deffn {Interactive Command} emacspeak-we-count-matches nil
@kbd{Not bound to any key.}

Count matches for locator  in Web page.
@end deffn

@deffn {Interactive Command} emacspeak-we-count-nested-tables nil
@kbd{Not bound to any key.}

Count nested tables in Web page.
@end deffn

@deffn {Interactive Command} emacspeak-we-count-tables nil
@kbd{Not bound to any key.}

Count  tables in Web page.
@end deffn

@deffn {Interactive Command} emacspeak-we-extract-by-class nil
@kbd{Not bound to any key.}

Extract elements having specified class attribute from HTML. Extracts
specified elements from current WWW page and displays it in a separate
buffer. Interactive use provides list of class values as completion.
@end deffn

@deffn {Interactive Command} emacspeak-we-extract-by-class-list nil
@kbd{Not bound to any key.}

Extract elements having class specified in list `classes' from HTML.
Extracts specified elements from current WWW page and displays it
in a separate buffer.  Interactive use provides list of class
values as completion. 
@end deffn

@deffn {Interactive Command} emacspeak-we-extract-by-id nil
@kbd{Not bound to any key.}

Extract elements having specified id attribute from HTML. Extracts
specified elements from current WWW page and displays it in a separate
buffer.
Interactive use provides list of id values as completion.
@end deffn

@deffn {Interactive Command} emacspeak-we-extract-by-id-list nil
@kbd{Not bound to any key.}

Extract elements having id specified in list `ids' from HTML.
Extracts specified elements from current WWW page and displays it in a
separate buffer. Interactive use provides list of id values as completion. 
@end deffn

@deffn {Interactive Command} emacspeak-we-extract-by-property nil
@kbd{Not bound to any key.}

Interactively prompt for an HTML property, e.g. id or class,
and provide a completion list of applicable  property values. Filter document by property that is specified.
@end deffn

@deffn {Interactive Command} emacspeak-we-extract-id-list-text nil
@kbd{Not bound to any key.}

Extract text nodes from elements having id specified in list `ids' from HTML.
Extracts specified elements from current WWW page and displays it in a
separate buffer. Interactive use provides list of id values as completion. 
@end deffn

@deffn {Interactive Command} emacspeak-we-extract-id-text nil
@kbd{Not bound to any key.}

Extract text nodes from elements having specified id attribute from HTML. Extracts
specified elements from current WWW page and displays it in a separate
buffer.
Interactive use provides list of id values as completion.
@end deffn

@deffn {Interactive Command} emacspeak-we-extract-matching-urls nil
@kbd{Not bound to any key.}

Extracts links whose URL matches pattern.
@end deffn

@deffn {Interactive Command} emacspeak-we-extract-media-streams nil
@kbd{Not bound to any key.}

Extract links to media streams.
operate on current web page when in a browser buffer; otherwise
 prompt for url.  Optional arg `speak' specifies if the result
 should be spoken automatically.
@end deffn

@deffn {Interactive Command} emacspeak-we-extract-media-streams-under-point nil
@kbd{Not bound to any key.}

In browser buffers, extract media streams from url under point.
@end deffn

@deffn {Interactive Command} emacspeak-we-extract-nested-table nil
@kbd{Not bound to any key.}

Extract nested table specified by `table-index'. Default is to
operate on current web page when in a browser buffer; otherwise
prompt for URL. Optional arg `speak' specifies if the result should be
spoken automatically.
@end deffn

@deffn {Interactive Command} emacspeak-we-extract-nested-table-list nil
@kbd{Not bound to any key.}

Extract specified list of tables from a Web page.
@end deffn

@deffn {Interactive Command} emacspeak-we-extract-print-streams nil
@kbd{Not bound to any key.}

Extract links to printable  streams.
operate on current web page when in a browser buffer; otherwise
 prompt for url.  Optional arg `speak' specifies if the result
 should be spoken automatically.
@end deffn

@deffn {Interactive Command} emacspeak-we-extract-table-by-match nil
@kbd{Not bound to any key.}

Extract table containing  specified match.
 Optional arg url specifies the page to extract content from.
@end deffn

@deffn {Interactive Command} emacspeak-we-extract-table-by-position nil
@kbd{Not bound to any key.}

Extract table at specified position.
Default is to extract from current page.
@end deffn

@deffn {Interactive Command} emacspeak-we-extract-tables-by-match-list nil
@kbd{Not bound to any key.}

Extract specified  tables from a WWW page.
Tables are specified by containing  match pattern
 found in the match list.
@end deffn

@deffn {Interactive Command} emacspeak-we-extract-tables-by-position-list nil
@kbd{Not bound to any key.}

Extract specified list of nested tables from a WWW page.
Tables are specified by their position in the list
 of nested tables found in the page.
@end deffn

@deffn {Interactive Command} emacspeak-we-follow-and-filter-by-id nil
@kbd{Not bound to any key.}

Follow url and point, and filter the result by specified id.
Id can be set locally for a buffer, and overridden with an
interactive prefix arg. If there is a known rewrite url rule, that is
used as well.
@end deffn

@deffn {Interactive Command} emacspeak-we-junk-by-class nil
@kbd{Not bound to any key.}

Extract elements not having specified class attribute from HTML. Extracts
specified elements from current WWW page and displays it in a separate
buffer. Interactive use provides list of class values as completion.
@end deffn

@deffn {Interactive Command} emacspeak-we-junk-by-class-list nil
@kbd{Not bound to any key.}

Extract elements not having class specified in list `classes' from HTML.
Extracts specified elements from current WWW page and displays it
in a separate buffer.  Interactive use provides list of class
values as completion. 
@end deffn

@deffn {Interactive Command} emacspeak-we-style-filter nil
@kbd{Not bound to any key.}

Extract elements matching specified style
from HTML.  Extracts specified elements from current WWW
page and displays it in a separate buffer.  Optional arg url
specifies the page to extract contents  from.
@end deffn

@deffn {Interactive Command} emacspeak-we-toggle-xsl-keep-result nil
@kbd{Not bound to any key.}

Toggle xsl keep result flag.
@end deffn

@deffn {Interactive Command} emacspeak-we-url-expand-and-execute nil
@kbd{Not bound to any key.}

Applies buffer-specific URL expander/executor function.
@end deffn

@deffn {Interactive Command} emacspeak-we-url-rewrite-and-follow nil
@kbd{Not bound to any key.}

Apply a url rewrite rule as specified in the current buffer
before following link under point.  If no rewrite rule is
defined, first prompt for one.  Rewrite rules are of the
form `(from to)' where from and to are strings.  Typically, the
rewrite rule is automatically set up by Emacspeak tools like
websearch where a rewrite rule is known.  Rewrite rules are
useful in jumping directly to the printer friendly version of an
article for example.  Optional interactive prefix arg prompts for
a rewrite rule even if one is already defined.
@end deffn

@deffn {Interactive Command} emacspeak-we-xpath-filter-and-follow nil
@kbd{Not bound to any key.}

Follow url and point, and filter the result by specified xpath.
XPath can be set locally for a buffer, and overridden with an
interactive prefix arg. If there is a known rewrite url rule, that is
used as well.
@end deffn

@deffn {Interactive Command} emacspeak-we-xpath-junk-and-follow nil
@kbd{Not bound to any key.}

Follow url and point, and filter the result by junking
elements specified by xpath.
XPath can be set locally for a buffer, and overridden with an
interactive prefix arg. If there is a known rewrite url rule, that is
used as well.
@end deffn

@deffn {Interactive Command} emacspeak-we-xsl-toggle nil
@kbd{Not bound to any key.}

Toggle  application of XSL transformations.
@end deffn

@deffn {Interactive Command} emacspeak-we-xslt-apply nil
@kbd{Not bound to any key.}

Apply specified transformation to current Web page.
@end deffn

@deffn {Interactive Command} emacspeak-we-xslt-filter nil
@kbd{Not bound to any key.}

Extract elements matching specified XPath path locator
from Web page -- default is the current page being viewed.
@end deffn

@deffn {Interactive Command} emacspeak-we-xslt-junk nil
@kbd{Not bound to any key.}

Junk elements matching specified locator.
@end deffn

@deffn {Interactive Command} emacspeak-we-xslt-select nil
@kbd{Not bound to any key.}

Select XSL transformation applied to Web pages before they are displayed .
@end deffn

@node emacspeak-websearch
@section emacspeak-websearch

Commentary:
This module provides utility functions for searching the WWW

Automatically generated documentation
for commands defined in module  emacspeak-websearch.

@deffn {Interactive Command} emacspeak-websearch-accessible-google nil
@kbd{Not bound to any key.}

Google Accessible Search -- see http://labs.google.com/accessible
@end deffn

@deffn {Interactive Command} emacspeak-websearch-amazon-search nil
@kbd{Not bound to any key.}

Amazon search.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-ask-jeeves nil
@kbd{Not bound to any key.}

Ask Jeeves for the answer.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-biblio-search nil
@kbd{Not bound to any key.}

Search Computer Science Bibliographies.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-blinkx-search nil
@kbd{Not bound to any key.}

BlinkX RSS Generator.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-citeseer-search nil
@kbd{Not bound to any key.}

Perform a CiteSeer search. 
@end deffn

@deffn {Interactive Command} emacspeak-websearch-company-news nil
@kbd{Not bound to any key.}

Perform an company news lookup.
Retrieves company news, research, profile, insider trades,  or upgrades/downgrades.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-cpan-search nil
@kbd{Not bound to any key.}

Search CPAN  Comprehensive Perl Archive Network   Site. 
@end deffn

@deffn {Interactive Command} emacspeak-websearch-ctan-search nil
@kbd{Not bound to any key.}

Search CTAN Comprehensive TeX Archive Network   Site. 
@end deffn

@deffn {Interactive Command} emacspeak-websearch-dispatch nil
@kbd{ control e ? }

 Press `?' to list available search engines.
When using supported browsers,  this interface attempts to speak the most relevant information on the result page.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-display-form nil
@kbd{Not bound to any key.}

Display form specified by form-markup.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-ebay-search nil
@kbd{Not bound to any key.}

Ebay search.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-exchange-rate-convertor nil
@kbd{Not bound to any key.}

Currency convertor.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-foldoc-search nil
@kbd{Not bound to any key.}

Perform a FolDoc search. 
@end deffn

@deffn {Interactive Command} emacspeak-websearch-freshmeat-search nil
@kbd{Not bound to any key.}

Search Freshmeat  Site. 
@end deffn

@deffn {Interactive Command} emacspeak-websearch-google nil
@kbd{Not bound to any key.}

Perform a Google search.
Optional interactive prefix arg `lucky' is equivalent to hitting the
I'm Feeling Lucky button on Google.
Uses  customizable option `emacspeak-websearch-google-results-only' to determine if we show just results.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-google-advanced nil
@kbd{Not bound to any key.}

Present Google advanced search form simplified for speech interaction.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-google-feeling-lucky nil
@kbd{Not bound to any key.}

Do a I'm Feeling Lucky Google search.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-google-mobile nil
@kbd{Not bound to any key.}

Google mobile search.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-google-news nil
@kbd{Not bound to any key.}

Invoke Google News url template.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-google-sak nil
@kbd{Not bound to any key.}

Perform a Google query against a specific index.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-google-search-in-date-range nil
@kbd{Not bound to any key.}

Use this from inside the calendar to do Google date-range searches.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-google-specialize nil
@kbd{Not bound to any key.}

Perform a specialized Google search. See the Google site for
  what is possible here:
https://www.google.com/options/specialsearches.html 
@end deffn

@deffn {Interactive Command} emacspeak-websearch-google-usenet-advanced nil
@kbd{Not bound to any key.}

Present Google Usenet advanced search form simplified for speech interaction.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-gutenberg nil
@kbd{Not bound to any key.}

Perform an Gutenberg search
@end deffn

@deffn {Interactive Command} emacspeak-websearch-help nil
@kbd{Not bound to any key.}

Displays key mapping used by Emacspeak Websearch.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-map-yahoo-directions-search nil
@kbd{Not bound to any key.}

Get driving directions from Yahoo.
With optional interactive prefix arg MAP shows the location map instead.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-merriam-webster-search nil
@kbd{Not bound to any key.}

Search the Merriam Webster Dictionary.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-news-yahoo nil
@kbd{Not bound to any key.}

Perform an Yahoo News search.
Optional prefix arg no-rss scrapes information from HTML.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-open-directory-search nil
@kbd{Not bound to any key.}

Perform an Open Directory search
@end deffn

@deffn {Interactive Command} emacspeak-websearch-quotes-yahoo-search nil
@kbd{Not bound to any key.}

Perform a Quotes Yahoo .
Default tickers to look up is taken from variable
emacspeak-wizards-personal-portfolio.
Default is to present the data in emacspeak's table browsing
mode --optional interactive prefix arg
causes data to be displayed as  a Web page.
You can customize the defaults by setting variable
emacspeak-websearch-quotes-yahoo-options to an appropriate string.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-recorded-books-search nil
@kbd{Not bound to any key.}

Present advanced search form for recorded books.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-rpm-find nil
@kbd{Not bound to any key.}

Search RPM  catalog  site.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-software-search nil
@kbd{Not bound to any key.}

Search SourceForge, Freshmeat and other sites. 
@end deffn

@deffn {Interactive Command} emacspeak-websearch-sourceforge-search nil
@kbd{Not bound to any key.}

Search SourceForge Site. 
@end deffn

@deffn {Interactive Command} emacspeak-websearch-swik-search nil
@kbd{Not bound to any key.}

Search swik software community site.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-usenet nil
@kbd{ control e  cap U  }

Prompt and browse a Usenet newsgroup.
Optional interactive prefix arg results in prompting for a search term.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-usenet-search nil
@kbd{Not bound to any key.}

Search a Usenet newsgroup.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-w3c-search nil
@kbd{Not bound to any key.}

Search the W3C Site.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-weather nil
@kbd{Not bound to any key.}

Get weather forecast for specified zip code.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-wikipedia-search nil
@kbd{Not bound to any key.}

Search Wikipedia using Google.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-yahoo nil
@kbd{Not bound to any key.}

Perform an Yahoo  search
@end deffn

@deffn {Interactive Command} emacspeak-websearch-yahoo-exchange-rate-convertor nil
@kbd{Not bound to any key.}

Currency convertor.
@end deffn

@deffn {Interactive Command} emacspeak-websearch-yahoo-historical-chart nil
@kbd{Not bound to any key.}

Look up historical stock data.
Optional second arg as-html processes the results as HTML rather than data.
@end deffn

@node emacspeak-webspace
@section emacspeak-webspace

Commentary:
WEBSPACE == Smart Web Gadgets For The Emacspeak Desktop

Automatically generated documentation
for commands defined in module  emacspeak-webspace.

@deffn {Interactive Command} emacspeak-webspace-atom-view nil
@kbd{Not bound to any key.}

View Atom feed.
@end deffn

@deffn {Interactive Command} emacspeak-webspace-feed-view nil
@kbd{Not bound to any key.}

View  feed using gfeeds.
@end deffn

@deffn {Interactive Command} emacspeak-webspace-filter nil
@kbd{Not bound to any key.}

Open headline at point by following its link property and filter for content.
@end deffn

@deffn {Interactive Command} emacspeak-webspace-google nil
@kbd{Not bound to any key.}

Display Google Search in a WebSpace buffer.
@end deffn

@deffn {Interactive Command} emacspeak-webspace-headlines nil
@kbd{ control ; SPACE h   hyper  SPACE h }

Speak current news headline.
@end deffn

@deffn {Interactive Command} emacspeak-webspace-headlines-view nil
@kbd{ <control return> }

Display all cached headlines in a special interaction buffer.
@end deffn

@deffn {Interactive Command} emacspeak-webspace-mode nil
@kbd{Not bound to any key.}

Major mode for Webspace interaction.

key             binding
---             -------

TAB		emacspeak-webspace-next-link
RET		emacspeak-webspace-open
.		emacspeak-webspace-filter
/		search-forward
<		beginning-of-buffer
>		end-of-buffer
?		search-backward
A		emacspeak-webspace-atom-view
F		emacspeak-webspace-feed-view
R		emacspeak-webspace-rss-view
b		emacspeak-webspace-previous-link
f		emacspeak-webspace-next-link
g		emacspeak-webspace-reader-refresh
n		next-line
p		previous-line
q		bury-buffer
t		emacspeak-webspace-transcode
y		emacspeak-webspace-yank-link
<S-tab>		emacspeak-webspace-previous-link

In addition to any hooks its parent mode `special-mode' might have run,
this mode runs the hook `emacspeak-webspace-mode-hook', as the final step
during initialization.
@end deffn

@deffn {Interactive Command} emacspeak-webspace-next-link nil
@kbd{Not bound to any key.}

Move to next link.
@end deffn

@deffn {Interactive Command} emacspeak-webspace-open nil
@kbd{Not bound to any key.}

Open headline at point by following its link property.
@end deffn

@deffn {Interactive Command} emacspeak-webspace-previous-link nil
@kbd{Not bound to any key.}

Move to previous link.
@end deffn

@deffn {Interactive Command} emacspeak-webspace-reader nil
@kbd{Not bound to any key.}

Display Google Reader Feed list in a WebSpace buffer.
Optional interactive prefix arg forces a refresh.
@end deffn

@deffn {Interactive Command} emacspeak-webspace-reader-refresh nil
@kbd{Not bound to any key.}

Refresh Reader.
@end deffn

@deffn {Interactive Command} emacspeak-webspace-reading-list nil
@kbd{ control ; SPACE r   hyper  SPACE r }

Set up scrolling reading list in header.
@end deffn

@deffn {Interactive Command} emacspeak-webspace-reading-list-view nil
@kbd{Not bound to any key.}

Switch to reading list view, creating it if needed.
@end deffn

@deffn {Interactive Command} emacspeak-webspace-rss-view nil
@kbd{Not bound to any key.}

View RSS feed.
@end deffn

@deffn {Interactive Command} emacspeak-webspace-transcode nil
@kbd{Not bound to any key.}

Transcode headline at point by following its link property.
@end deffn

@deffn {Interactive Command} emacspeak-webspace-update-headlines nil
@kbd{Not bound to any key.}

Setup  news updates.
Updated headlines found in emacspeak-webspace-headlines.
@end deffn

@deffn {Interactive Command} emacspeak-webspace-update-weather nil
@kbd{Not bound to any key.}

Setup periodic weather updates.
Updated weather is found in `emacspeak-webspace-current-weather'.
@end deffn

@deffn {Interactive Command} emacspeak-webspace-weather nil
@kbd{ control ; SPACE w   hyper  SPACE w }

Speak current weather.
@end deffn

@deffn {Interactive Command} emacspeak-webspace-yank-link nil
@kbd{Not bound to any key.}

Yank link under point into kill ring.
@end deffn

@node emacspeak-webutils
@section emacspeak-webutils

Commentary:
This module provides common Web utilities for emacspeak.
This is to avoid duplication of code between emacspeak-w3.el
and emacspeak-w3m.el

Automatically generated documentation
for commands defined in module  emacspeak-webutils.

@deffn {Interactive Command} emacspeak-atom-browse nil
@kbd{Not bound to any key.}

Browse specified ATOM feed.
@end deffn

@deffn {Interactive Command} emacspeak-opml-display nil
@kbd{Not bound to any key.}

Retrieve and display OPML  URL.
@end deffn

@deffn {Interactive Command} emacspeak-rss-browse nil
@kbd{ control e control u }

Browse specified RSS feed.
@end deffn

@deffn {Interactive Command} emacspeak-webutils-atom-display nil
@kbd{Not bound to any key.}

Display ATOM feed.
@end deffn

@deffn {Interactive Command} emacspeak-webutils-fv nil
@kbd{Not bound to any key.}

Display RSS or ATOM feed URL.
@end deffn

@deffn {Interactive Command} emacspeak-webutils-google-extract-from-cache nil
@kbd{Not bound to any key.}

Extract current  page from the Google cache.
With a prefix argument, extracts url under point.
@end deffn

@deffn {Interactive Command} emacspeak-webutils-google-on-this-site nil
@kbd{Not bound to any key.}

Perform a google search restricted to the current WWW site.
@end deffn

@deffn {Interactive Command} emacspeak-webutils-google-similar-to-this-page nil
@kbd{Not bound to any key.}

Ask Google to find documents similar to this one.
@end deffn

@deffn {Interactive Command} emacspeak-webutils-google-who-links-to-this-page nil
@kbd{Not bound to any key.}

Perform a google search to locate documents that link to the
current page.
@end deffn

@deffn {Interactive Command} emacspeak-webutils-jump-to-title-in-content nil
@kbd{Not bound to any key.}

Jumps to the title in web document.
The first time it is called, it jumps to the first
instance  of the title.  Repeated calls jump to further
instances.
@end deffn

@deffn {Interactive Command} emacspeak-webutils-open-in-other-browser nil
@kbd{Not bound to any key.}

Opens link in alternate browser.
 If using default browser is w3, uses w3m and vice-versa
@end deffn

@deffn {Interactive Command} emacspeak-webutils-open-subscribed-feeds nil
@kbd{Not bound to any key.}

Feed list specified by OPML file customized via emacspeak-my-subscribed-feeds
@end deffn

@deffn {Interactive Command} emacspeak-webutils-play-media-at-point nil
@kbd{Not bound to any key.}

Play media url under point.
Optional interactive prefix arg `playlist-p' says to treat the link as a playlist. 
@end deffn

@deffn {Interactive Command} emacspeak-webutils-rss-display nil
@kbd{Not bound to any key.}

Display RSS feed.
@end deffn

@deffn {Interactive Command} emacspeak-webutils-transcode-current-url-via-google nil
@kbd{Not bound to any key.}

Transcode current URL via Google.
  Reverse effect with prefix arg.
@end deffn

@deffn {Interactive Command} emacspeak-webutils-transcode-via-google nil
@kbd{Not bound to any key.}

Transcode URL under point via Google.
 Reverse effect with prefix arg for links on a transcoded page.
@end deffn

@deffn {Interactive Command} emacspeak-webutils-view-feed-via-google-reader nil
@kbd{Not bound to any key.}

Pulls feed under point via Google Reader.
@end deffn

@node emacspeak-widget
@section emacspeak-widget

Commentary:
This module implements the necessary extensions to provide talking
widgets.

Automatically generated documentation
for commands defined in module  emacspeak-widget.

@deffn {Interactive Command} emacspeak-widget-browse-widget-interactively nil
@kbd{Not bound to any key.}

Allows you to browse a widget
@end deffn

@deffn {Interactive Command} emacspeak-widget-help nil
@kbd{Not bound to any key.}

Speak help for widget under point.
@end deffn

@deffn {Interactive Command} emacspeak-widget-summarize-parent nil
@kbd{Not bound to any key.}

Summarize parent of widget at point.
@end deffn

@deffn {Interactive Command} emacspeak-widget-summarize-widget-under-point nil
@kbd{Not bound to any key.}

Summarize a widget if any under point.
Optional interactive prefix specifies how many levels to go up from current
widget before summarizing.
@end deffn

@deffn {Interactive Command} emacspeak-widget-update-from-minibuffer nil
@kbd{Not bound to any key.}

Sets widget at point by invoking its prompter.
@end deffn

@node emacspeak-wizards
@section emacspeak-wizards

Commentary:
Contains various wizards for the Emacspeak desktop.

Automatically generated documentation
for commands defined in module  emacspeak-wizards.

@deffn {Interactive Command} emacspeak-annotate-add-annotation nil
@kbd{Not bound to any key.}

Add annotation to the annotation working buffer.
Prompt for annotation buffer if not already set.
Interactive prefix arg `reset' prompts for the annotation
buffer even if one is already set.
Annotation is entered in a temporary buffer and the
annotation is inserted into the working buffer when complete.
@end deffn

@deffn {Interactive Command} emacspeak-clipboard-copy nil
@kbd{ control e control c }

Copy contents of the region to the emacspeak clipboard.
Previous contents of the clipboard will be overwritten.  The Emacspeak
clipboard is a convenient way of sharing information between
independent Emacspeak sessions running on the same or different
machines.  Do not use this for sharing information within an Emacs
session --Emacs' register commands are far more efficient and
light-weight.  Optional interactive prefix arg results in Emacspeak
prompting for the clipboard file to use.
Argument START and END specifies  region.
Optional argument PROMPT  specifies whether we prompt for the name of a clipboard file.
@end deffn

@deffn {Interactive Command} emacspeak-clipboard-paste nil
@kbd{ control e control y }

Yank contents of the Emacspeak clipboard at point.
The Emacspeak clipboard is a convenient way of sharing information between
independent Emacspeak sessions running on the same or different
machines.  Do not use this for sharing information within an Emacs
session --Emacs' register commands are far more efficient and
light-weight.  Optional interactive prefix arg pastes from
the emacspeak table clipboard instead.
@end deffn

@deffn {Interactive Command} emacspeak-copy-current-file nil
@kbd{ control e meta c }

Copy file visited in current buffer to new location.
Prompts for the new location and preserves modification time
  when copying.  If location is a directory, the file is copied
  to that directory under its current name ; if location names
  a file in an existing directory, the specified name is
  used.  Asks for confirmation if the copy will result in an
  existing file being overwritten.
@end deffn

@deffn {Interactive Command} emacspeak-curl nil
@kbd{Not bound to any key.}

Grab URL using Curl, and preview it with a browser .
@end deffn

@deffn {Interactive Command} emacspeak-customize nil
@kbd{ control e  cap C  }

Customize Emacspeak.
@end deffn

@deffn {Interactive Command} emacspeak-customize-personal-settings nil
@kbd{Not bound to any key.}

Create a customization buffer for browsing and updating
personal customizations.
@end deffn

@deffn {Interactive Command} emacspeak-cvs-berlios-get-project-snapshot nil
@kbd{Not bound to any key.}

Grab CVS snapshot  of specified project from berlios.de.
Ask for module name if prefix argument is given
@end deffn

@deffn {Interactive Command} emacspeak-cvs-get-anonymous nil
@kbd{Not bound to any key.}

Get latest cvs snapshot of emacspeak.
@end deffn

@deffn {Interactive Command} emacspeak-cvs-gnu-get-project-snapshot nil
@kbd{Not bound to any key.}

Grab CVS snapshot  of specified project from gnu.
Ask for module name if prefix argument is given
@end deffn

@deffn {Interactive Command} emacspeak-cvs-sf-get-project-snapshot nil
@kbd{Not bound to any key.}

Grab CVS snapshot  of specified project from sf.
Ask for module name if prefix argument is given
@end deffn

@deffn {Interactive Command} emacspeak-emergency-tts-restart nil
@kbd{ control e <insert> }

For use in an emergency.
Will start TTS engine specified by
emacspeak-emergency-tts-server.
@end deffn

@deffn {Interactive Command} emacspeak-frame-label-or-switch-to-labelled-frame nil
@kbd{ control e meta f }

Switch to labelled frame.
With optional PREFIX argument, label current frame.
@end deffn

@deffn {Interactive Command} emacspeak-frame-read-frame-label nil
@kbd{Not bound to any key.}

Read a frame label with completion.
@end deffn

@deffn {Interactive Command} emacspeak-generate-documentation nil
@kbd{Not bound to any key.}

Generate docs for all emacspeak commands.
Prompts for FILENAME in which to save the documentation.
Warning! Contents of file filename will be overwritten.
@end deffn

@deffn {Interactive Command} emacspeak-generate-texinfo-command-documentation nil
@kbd{Not bound to any key.}

Generate texinfo documentation  for all emacspeak
commands  into file commands.texi.
Warning! Contents of file commands.texi will be overwritten.
@end deffn

@deffn {Interactive Command} emacspeak-generate-texinfo-option-documentation nil
@kbd{Not bound to any key.}

Generate texinfo documentation  for all emacspeak
options  into file filename.
Warning! Contents of file filename will be overwritten.
@end deffn

@deffn {Interactive Command} emacspeak-kill-buffer-quietly nil
@kbd{Not bound to any key.}

Kill current buffer without asking for confirmation.
@end deffn

@deffn {Interactive Command} emacspeak-learn-emacs-mode nil
@kbd{ control e <f1>   control h control l   <f1> control l   <help> control l }

Helps you learn the keys.  You can press keys and hear what they do.
To leave, press C-g.
@end deffn

@deffn {Interactive Command} emacspeak-link-current-file nil
@kbd{ control e meta l }

Link (hard link) file visited in current buffer to new location.
Prompts for the new location and preserves modification time
  when linking.  If location is a directory, the file is copied
  to that directory under its current name ; if location names
  a file in an existing directory, the specified name is
  used.  Signals an error if target already exists.
@end deffn

@deffn {Interactive Command} emacspeak-links nil
@kbd{Not bound to any key.}

Launch links on  specified URL in a new terminal.
@end deffn

@deffn {Interactive Command} emacspeak-lynx nil
@kbd{Not bound to any key.}

Launch lynx on  specified URL in a new terminal.
@end deffn

@deffn {Interactive Command} emacspeak-next-frame-or-buffer nil
@kbd{ <control right> }

Move to next buffer.
With optional interactive prefix arg `frame', move to next frame instead.
@end deffn

@deffn {Interactive Command} emacspeak-previous-frame-or-buffer nil
@kbd{ <control left> }

Move to previous buffer.
With optional interactive prefix arg `frame', move to previous frame instead.
@end deffn

@deffn {Interactive Command} emacspeak-root nil
@kbd{ control e control r }

Start a root shell or switch to one that already exists.
Optional interactive prefix arg `cd' executes cd
default-directory after switching.
@end deffn

@deffn {Interactive Command} emacspeak-select-this-buffer-next-display nil
@kbd{ control e <control right> }

Select this buffer as displayed in a `next' frame.
See documentation for command
`emacspeak-select-this-buffer-other-window-display' for the
meaning of `next'.
@end deffn

@deffn {Interactive Command} emacspeak-select-this-buffer-other-window-display nil
@kbd{Not bound to any key.}

Switch  to this buffer as displayed in a different frame.  Emacs
allows you to display the same buffer in multiple windows or
frames.  These different windows can display different
portions of the buffer.  This is equivalent to leaving a
book open at places at once.  This command allows you to
move to the places where you have left the book open.  The
number used to invoke this command specifies which of the
displays you wish to select.  Typically you will have two or
at most three such displays open.  The current display is 0,
the next is 1, and so on.  Optional argument ARG specifies
the display to select.
@end deffn

@deffn {Interactive Command} emacspeak-select-this-buffer-previous-display nil
@kbd{ control e <control left> }

Select this buffer as displayed in a `previous' window.
See documentation for command
`emacspeak-select-this-buffer-other-window-display' for the
meaning of `previous'.
@end deffn

@deffn {Interactive Command} emacspeak-show-personality-at-point nil
@kbd{ control e meta v }

Show value of property personality (and possibly face)
at point.
@end deffn

@deffn {Interactive Command} emacspeak-show-property-at-point nil
@kbd{Not bound to any key.}

Show value of PROPERTY at point.
If optional arg property is not supplied, read it interactively.
Provides completion based on properties that are of interest.
If no property is set, show a message and exit.
@end deffn

@deffn {Interactive Command} emacspeak-skip-blank-lines-backward nil
@kbd{ <shift up> }

Move backward  across blank lines.
The line under point is   then spoken.
Signals beginning  of buffer.
@end deffn

@deffn {Interactive Command} emacspeak-skip-blank-lines-forward nil
@kbd{ <shift down> }

Move forward across blank lines.
The line under point is then spoken.
Signals end of buffer.
@end deffn

@deffn {Interactive Command} emacspeak-speak-browse-linux-howto nil
@kbd{ control e  cap H  }

Browse a Linux Howto file.
We cleanup underlining, and set up outline mode correctly.
@end deffn

@deffn {Interactive Command} emacspeak-speak-popup-messages nil
@kbd{ control h  cap M    <f1>  cap M    <help>  cap M  }

Pop up messages buffer.
If it is already selected then hide it and try to restore
previous window configuration.
@end deffn

@deffn {Interactive Command} emacspeak-speak-run-shell-command nil
@kbd{ control e ! }

Invoke shell COMMAND and display its output as a table. The
results are placed in a buffer in Emacspeak's table browsing
mode. Optional interactive prefix arg read-as-csv interprets the
result as csv. . Use this for running shell commands that produce
tabulated output. This command should be used for shell commands
that produce tabulated output that works with Emacspeak's table
recognizer. Verify this first by running the command in a shell
and executing command `emacspeak-table-display-table-in-region'
normally bound to C-e TAB.
@end deffn

@deffn {Interactive Command} emacspeak-speak-telephone-directory nil
@kbd{Not bound to any key.}

Lookup and display a phone number.
With prefix arg, opens the phone book for editing.
@end deffn

@deffn {Interactive Command} emacspeak-speak-this-buffer-next-display nil
@kbd{ control e <right> }

Speak this buffer as displayed in a `previous' window.
See documentation for command
`emacspeak-speak-this-buffer-other-window-display' for the
meaning of `next'.
@end deffn

@deffn {Interactive Command} emacspeak-speak-this-buffer-other-window-display nil
@kbd{ control e / }

Speak this buffer as displayed in a different frame.  Emacs
allows you to display the same buffer in multiple windows or
frames.  These different windows can display different
portions of the buffer.  This is equivalent to leaving a
book open at places at once.  This command allows you to
listen to the places where you have left the book open.  The
number used to invoke this command specifies which of the
displays you wish to speak.  Typically you will have two or
at most three such displays open.  The current display is 0,
the next is 1, and so on.  Optional argument ARG specifies
the display to speak.
@end deffn

@deffn {Interactive Command} emacspeak-speak-this-buffer-previous-display nil
@kbd{ control e <left> }

Speak this buffer as displayed in a `previous' window.
See documentation for command
`emacspeak-speak-this-buffer-other-window-display' for the
meaning of `previous'.
@end deffn

@deffn {Interactive Command} emacspeak-ssh-tts-restart nil
@kbd{ control e <deletechar>   control e <delete> }

Restart specified ssh tts server.
@end deffn

@deffn {Interactive Command} emacspeak-sudo nil
@kbd{Not bound to any key.}

SUDo command --run command as super user.
@end deffn

@deffn {Interactive Command} emacspeak-sudo-edit nil
@kbd{Not bound to any key.}

Edit file as Root.
@end deffn

@deffn {Interactive Command} emacspeak-switch-to-previous-buffer nil
@kbd{Not bound to any key.}

Switch to most recently used interesting buffer.
Obsoleted by `previous-buffer' in Emacs 22
@end deffn

@deffn {Interactive Command} emacspeak-symlink-current-file nil
@kbd{ control e meta s }

Link (symbolic link) file visited in current buffer to new location.
Prompts for the new location and preserves modification time
  when linking.  If location is a directory, the file is copied
  to that directory under its current name ; if location names
  a file in an existing directory, the specified name is
  used.  Signals an error if target already exists.
@end deffn

@deffn {Interactive Command} emacspeak-view-emacspeak-doc nil
@kbd{Not bound to any key.}

Display a summary of all Emacspeak commands.
@end deffn

@deffn {Interactive Command} emacspeak-view-emacspeak-faq nil
@kbd{ control e  cap F  }

Browse the Emacspeak FAQ.
@end deffn

@deffn {Interactive Command} emacspeak-view-emacspeak-news nil
@kbd{ control e  cap N  }

Display info on recent change to Emacspeak.
@end deffn

@deffn {Interactive Command} emacspeak-view-emacspeak-tips nil
@kbd{ control e  cap T  }

Browse  Emacspeak productivity tips.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-add-autoload-cookies nil
@kbd{Not bound to any key.}

Add autoload cookies to file f.
Default is to add autoload cookies to current file.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-braille nil
@kbd{Not bound to any key.}

Insert Braille string at point.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-byte-compile-current-buffer nil
@kbd{Not bound to any key.}

byte compile current buffer
@end deffn

@deffn {Interactive Command} emacspeak-wizards-comma-at-end-of-word nil
@kbd{Not bound to any key.}

Move to the end of current word and add a comma.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-count-slides-in-region nil
@kbd{Not bound to any key.}

Count slides starting from point.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-display-pod-as-manpage nil
@kbd{Not bound to any key.}

Create a virtual manpage in Emacs from the Perl Online Documentation.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-dvi-display nil
@kbd{Not bound to any key.}

Called to set up preview of an DVI file.
Assumes we are in a buffer visiting a .DVI file.
Previews those contents as text and nukes the buffer
visiting the DVI file.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-dvi-mode nil
@kbd{Not bound to any key.}

Major mode for browsing DVI files.

DVI files  are converted to text and previewed using text mode.

This mode runs the hook `emacspeak-wizards-dvi-mode-hook', as the final step
during initialization.

key             binding
---             -------

@end deffn

@deffn {Interactive Command} emacspeak-wizards-edit-file-as-root nil
@kbd{Not bound to any key.}

Edit file as root using sudo vi.
See /etc/sudoers for how to set up sudo.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-end-of-word nil
@kbd{Not bound to any key.}

move to end of word
@end deffn

@deffn {Interactive Command} emacspeak-wizards-enumerate-matching-commands nil
@kbd{Not bound to any key.}

Prompt for a string pattern and return list of commands whose names match pattern.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-enumerate-matching-faces nil
@kbd{Not bound to any key.}

Enumerate  faces matching pattern.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-enumerate-obsolete-faces nil
@kbd{Not bound to any key.}

utility function to enumerate old, obsolete maps that we have still  mapped to voices.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-enumerate-uncovered-commands nil
@kbd{Not bound to any key.}

Enumerate unadvised commands matching pattern.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-enumerate-unmapped-faces nil
@kbd{Not bound to any key.}

Enumerate unmapped faces matching pattern.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-espeak-region nil
@kbd{Not bound to any key.}

Speak region using ESpeak polyglot wizard.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-espeak-string nil
@kbd{Not bound to any key.}

Speak string in lang via ESpeak.
Lang is obtained from property `lang' on string, or  via an interactive prompt.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-find-emacspeak-source nil
@kbd{Not bound to any key.}

Like find-file, but binds default-directory to emacspeak-directory.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-find-file-as-root nil
@kbd{Not bound to any key.}

Like `ido-find-file, but automatically edit the file with
root-privileges (using tramp/sudo), if the file is not writable by
user.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-find-grep nil
@kbd{Not bound to any key.}

Run compile using find and grep.
Interactive  arguments specify filename pattern and search pattern.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-find-longest-line-in-region nil
@kbd{Not bound to any key.}

Find longest line in region.
Moves to the longest line when called interactively.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-find-longest-paragraph-in-region nil
@kbd{Not bound to any key.}

Find longest paragraph in region.
Moves to the longest paragraph when called interactively.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-find-shortest-line-in-region nil
@kbd{Not bound to any key.}

Find shortest line in region.
Moves to the shortest line when called interactively.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-finder-find nil
@kbd{Not bound to any key.}

Run find-dired on specified switches after prompting for the
directory to where find is to be launched.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-finder-mode nil
@kbd{Not bound to any key.}

Emacspeak Finder

This mode runs the hook `emacspeak-wizards-finder-mode-hook', as the final step
during initialization.

key             binding
---             -------

@end deffn

@deffn {Interactive Command} emacspeak-wizards-fix-read-only-text nil
@kbd{Not bound to any key.}

Nuke read-only property on text range.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-fix-typo nil
@kbd{Not bound to any key.}

Search and replace  recursively in all files with extension `ext'
for `word' and replace it with correction.
Use with caution.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-generate-finder nil
@kbd{Not bound to any key.}

Generate a widget-enabled finder wizard.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-generate-voice-sampler nil
@kbd{Not bound to any key.}

Generate a buffer that shows a sample line in all the ACSS settings
for the current voice family.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-get-table-content-from-file nil
@kbd{Not bound to any key.}

Extract table specified by depth and count from HTML
content at file.
Extracted content is sent to STDOUT.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-get-table-content-from-url nil
@kbd{Not bound to any key.}

Extract table specified by depth and count from HTML
content at URL.
Extracted content is placed as a csv file in task.csv.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-google-1box nil
@kbd{Not bound to any key.}

Invoke Google 1Box search.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-google-hits nil
@kbd{Not bound to any key.}

Filter Google results after performing search to show just the
hits.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-google-squared nil
@kbd{Not bound to any key.}

Invoke Google Squared search.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-google-transcode nil
@kbd{Not bound to any key.}

View Web through Google Transcoder.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-how-many-matches nil
@kbd{Not bound to any key.}

If you define a file local variable
called `emacspeak-occur-pattern' that holds a regular expression
that matches  lines of interest, you can use this command to conveniently
run `how-many' to count  matching header lines.
With interactive prefix arg, prompts for and remembers the file local pattern.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-i810-display-status nil
@kbd{Not bound to any key.}

Show display status on thinkpads using i810switch.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-js nil
@kbd{Not bound to any key.}

Run JS in a comint sub-process.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-lacheck-buffer-file nil
@kbd{Not bound to any key.}

Run Lacheck on current buffer.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-load-current-file nil
@kbd{Not bound to any key.}

load file into emacs
@end deffn

@deffn {Interactive Command} emacspeak-wizards-move-and-speak nil
@kbd{Not bound to any key.}

Speaks a chunk of text bounded by point and a target position.
Target position is specified using a navigation command and a
count that specifies how many times to execute that command
first.  Point is left at the target position.  Interactively,
command is specified by pressing the key that invokes the
command.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-next-bullet nil
@kbd{Not bound to any key.}

Navigate to and speak next `bullet'.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-next-interactive-defun nil
@kbd{Not bound to any key.}

Move point to the next interactive defun
@end deffn

@deffn {Interactive Command} emacspeak-wizards-next-shell nil
@kbd{Not bound to any key.}

Switch to next shell.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-occur-header-lines nil
@kbd{Not bound to any key.}

If you define a file local variable called
`emacspeak-occur-pattern' that holds a regular expression that
matches header lines, you can use this command to conveniently
run `occur' to find matching header lines. With prefix arg,
prompts for and sets value of the file local pattern.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-pdf-open nil
@kbd{Not bound to any key.}

Open pdf file as text.
Optional interactive prefix arg ask-pwd prompts for password.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-popup-input-buffer nil
@kbd{Not bound to any key.}

Provide an input buffer in a specified mode.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-portfolio-quotes nil
@kbd{Not bound to any key.}

Bring up detailed stock quotes for portfolio specified by
emacspeak-wizards-personal-portfolio.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-ppp-toggle nil
@kbd{Not bound to any key.}

Bring up or bring down ppp.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-ppt-display nil
@kbd{Not bound to any key.}

Called to set up preview of an PPT file.
Assumes we are in a buffer visiting a .ppt file.
Previews those contents as HTML and nukes the buffer
visiting the ppt file.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-ppt-mode nil
@kbd{Not bound to any key.}

Major mode for browsing PPT slides.

PPT files  are converted to HTML and previewed using a browser.

In addition to any hooks its parent mode `text-mode' might have run,
this mode runs the hook `emacspeak-wizards-ppt-mode-hook', as the final step
during initialization.

key             binding
---             -------

@end deffn

@deffn {Interactive Command} emacspeak-wizards-previous-bullet nil
@kbd{Not bound to any key.}

Navigate to and speak previous `bullet'.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-previous-shell nil
@kbd{Not bound to any key.}

Switch to previous shell.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-refresh-shell-history nil
@kbd{Not bound to any key.}

Refresh shell history from disk.
This is for use in conjunction with bash to allow multiple emacs
  shell buffers to   share history information.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-rivo nil
@kbd{Not bound to any key.}

Rivo wizard.
Prompts for relevant information and schedules a rivo job using
  UNIX At scheduling facility.
RIVO is implemented by rivo.pl ---
 a Perl script  that can be used to launch streaming media and record
   streaming media for  a specified duration.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-rpm-query-in-dired nil
@kbd{Not bound to any key.}

Run rpm -qi on current dired entry.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-shell nil
@kbd{Not bound to any key.}

Run Emacs built-in `shell' command when not in a shell buffer, or when called with a prefix argument. 
When called from a shell buffer, switches to `next' shell buffer.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-shell-toggle nil
@kbd{ control e <f11> }

Switch to the shell buffer and cd to
 the directory of the current buffer.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-show-commentary nil
@kbd{Not bound to any key.}

Display commentary. Default is to display commentary from current buffer.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-show-environment-variable nil
@kbd{Not bound to any key.}

Display value of specified environment variable.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-show-eval-result nil
@kbd{ control e &   META ESCAPE : }

Convenience command to pretty-print and view Lisp evaluation results.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-show-face nil
@kbd{Not bound to any key.}

Show salient properties of specified face.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-show-memory-used nil
@kbd{Not bound to any key.}

Convenience command to view state of memory used in this session so far.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-speak-iso-datetime nil
@kbd{Not bound to any key.}

Make ISO date-time speech friendly.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-spot-words nil
@kbd{Not bound to any key.}

Searches recursively in all files with extension `ext'
for `word' and displays hits in a compilation buffer.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-squeeze-blanks nil
@kbd{Not bound to any key.}

Squeeze multiple blank lines in current buffer.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-sunrise-sunset nil
@kbd{Not bound to any key.}

Display sunrise/sunset for specified address.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-switch-shell nil
@kbd{Not bound to any key.}

Switch to next/previous shell buffer.
Direction specifies previous/next.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-term nil
@kbd{Not bound to any key.}

Like M-x shell for ansi-term.
Starts a terminal, or switches to an existing one.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-terminal nil
@kbd{Not bound to any key.}

Launch terminal and rename buffer appropriately.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-tex-tie-current-word nil
@kbd{Not bound to any key.}

Tie the next n  words.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-thanks-mail-signature nil
@kbd{Not bound to any key.}

insert thanks , --Raman at the end of mail message
@end deffn

@deffn {Interactive Command} emacspeak-wizards-toggle-mm-dd-yyyy-date-pronouncer nil
@kbd{Not bound to any key.}

Toggle pronunciation of mm-dd-yyyy dates.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-tpctl-display-status nil
@kbd{Not bound to any key.}

Show display status on thinkpads using tpctl.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-tramp-open-location nil
@kbd{Not bound to any key.}

Open specified tramp location.
Location is specified by name.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-unhex-uri nil
@kbd{Not bound to any key.}

UnEscape URI
@end deffn

@deffn {Interactive Command} emacspeak-wizards-units nil
@kbd{Not bound to any key.}

Run units in a comint sub-process.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-use-w3-or-w3m nil
@kbd{Not bound to any key.}

Alternates between using W3 and W3M for browse-url.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-vc-n nil
@kbd{Not bound to any key.}

Accelerator for VC viewer.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-vc-viewer nil
@kbd{Not bound to any key.}

View contents of specified virtual console.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-vc-viewer-mode nil
@kbd{Not bound to any key.}

Major mode for interactively viewing virtual console contents.

key             binding
---             -------

C-l		emacspeak-wizards-vc-viewer-refresh

This mode runs the hook `emacspeak-wizards-vc-viewer-mode-hook', as the final step
during initialization.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-vc-viewer-refresh nil
@kbd{Not bound to any key.}

Refresh view of VC we're viewing.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-vi-as-su-file nil
@kbd{Not bound to any key.}

Launch sudo vi on specified file in a terminal.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-view-url nil
@kbd{Not bound to any key.}

Open a new buffer containing the contents of URL.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-voice-sampler nil
@kbd{Not bound to any key.}

Read a personality  and apply it to the current line.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-vpn-toggle nil
@kbd{Not bound to any key.}

Bring up or bring down vpn.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-xl-display nil
@kbd{Not bound to any key.}

Called to set up preview of an XL file.
Assumes we are in a buffer visiting a .xls file.
Previews those contents as HTML and nukes the buffer
visiting the xls file.
@end deffn

@deffn {Interactive Command} emacspeak-wizards-xl-mode nil
@kbd{Not bound to any key.}

Major mode for browsing XL spreadsheets.

XL Sheets are converted to HTML and previewed using a browser.

In addition to any hooks its parent mode `text-mode' might have run,
this mode runs the hook `emacspeak-wizards-xl-mode-hook', as the final step
during initialization.

key             binding
---             -------

@end deffn

@node emacspeak-xml-shell
@section emacspeak-xml-shell

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-xml-shell.

@deffn {Interactive Command} emacspeak-xml-shell nil
@kbd{Not bound to any key.}

Start Xml-Shell on contents of system-id.
@end deffn

@deffn {Interactive Command} emacspeak-xml-shell-browse-current nil
@kbd{Not bound to any key.}

Display current node.
@end deffn

@deffn {Interactive Command} emacspeak-xml-shell-browse-result nil
@kbd{Not bound to any key.}

Display XPath  and display its result using W3.
@end deffn

@deffn {Interactive Command} emacspeak-xml-shell-goto-children nil
@kbd{Not bound to any key.}

Navigate down to the children of current node.
@end deffn

@deffn {Interactive Command} emacspeak-xml-shell-goto-next-child nil
@kbd{Not bound to any key.}

Navigate forward  to the next child  of current node.
@end deffn

@deffn {Interactive Command} emacspeak-xml-shell-goto-parent nil
@kbd{Not bound to any key.}

Navigate up to the parent of current node.
@end deffn

@deffn {Interactive Command} emacspeak-xml-shell-goto-previous-child nil
@kbd{Not bound to any key.}

Navigate backward  to the previous child  of current node.
@end deffn

@deffn {Interactive Command} emacspeak-xml-shell-mode nil
@kbd{Not bound to any key.}

XML Shell

Interactive XML browser.
key             binding
---             -------

C-c		Prefix Command
<down>		emacspeak-xml-shell-goto-children
<left>		emacspeak-xml-shell-goto-previous-child
<right>		emacspeak-xml-shell-goto-next-child
<up>		emacspeak-xml-shell-goto-parent

C-c C-v		emacspeak-xml-shell-browse-result
C-c v		emacspeak-xml-shell-browse-current

In addition to any hooks its parent mode `comint-mode' might have run,
this mode runs the hook `emacspeak-xml-shell-mode-hook', as the final step
during initialization.
@end deffn

@node emacspeak-xslt
@section emacspeak-xslt

No Commentary

Automatically generated documentation
for commands defined in module  emacspeak-xslt.

@deffn {Interactive Command} emacspeak-xslt-view nil
@kbd{Not bound to any key.}

Browse URL with specified XSL style.
@end deffn

@deffn {Interactive Command} emacspeak-xslt-view-file nil
@kbd{Not bound to any key.}

Transform `file' using `style' and preview via browse-url.
@end deffn

@deffn {Interactive Command} emacspeak-xslt-view-region nil
@kbd{Not bound to any key.}

Browse XML region with specified XSL style.
@end deffn

@deffn {Interactive Command} emacspeak-xslt-view-xml nil
@kbd{Not bound to any key.}

Browse XML URL with specified XSL style.
@end deffn

@node emacspeak-zinf
@section emacspeak-zinf

Commentary:
Defines a simple derived mode for interacting with
zinf.
zinf == zinf is not freeamp
zinf navigation commands then work via single keystrokes.

Automatically generated documentation
for commands defined in module  emacspeak-zinf.

@deffn {Interactive Command} emacspeak-zinf nil
@kbd{Not bound to any key.}

Play specified resource using zinf.
Resource is an  MP3 file or m3u playlist.
The player is placed in a buffer in emacspeak-zinf-mode.
@end deffn

@deffn {Interactive Command} emacspeak-zinf-mode nil
@kbd{Not bound to any key.}

Major mode for zinf interaction. 

key             binding
---             -------

+		emacspeak-zinf-zinf-call-command
-		emacspeak-zinf-zinf-call-command
=		emacspeak-zinf-zinf-call-command
?		emacspeak-zinf-zinf-call-command
B		emacspeak-zinf-zinf-call-command
F		emacspeak-zinf-zinf-call-command
J		emacspeak-zinf-zinf-call-command
b		emacspeak-zinf-zinf-call-command
f		emacspeak-zinf-zinf-call-command
j		emacspeak-zinf-zinf-call-command
p .. q		emacspeak-zinf-zinf-call-command
s		emacspeak-zinf-zinf-call-command
z		emacspeak-zinf
<left>		emacspeak-aumix-wave-decrease
<right>		emacspeak-aumix-wave-increase

This mode runs the hook `emacspeak-zinf-mode-hook', as the final step
during initialization.
@end deffn

@deffn {Interactive Command} emacspeak-zinf-zinf-call-command nil
@kbd{Not bound to any key.}

Call appropriate zinf command.
@end deffn

@deffn {Interactive Command} emacspeak-zinf-zinf-command nil
@kbd{Not bound to any key.}

Execute Zinf command.
@end deffn

@node emacspeak
@section emacspeak

Commentary:
The complete audio desktop.

Emacspeak extends Emacs to be a fully functional audio desktop.
This is the main emacspeak module.
It actually does very little:
It loads the various parts of the system.

Automatically generated documentation
for commands defined in module  emacspeak.

@deffn {Interactive Command} emacspeak-describe-emacspeak nil
@kbd{ control h control e   <f1> control e   <help> control e }

Give a brief overview of emacspeak.
@end deffn

@deffn {Interactive Command} emacspeak-submit-bug nil
@kbd{ control e CONTROL meta b }

Function to submit a bug to the programs maintainer.
@end deffn

@node voice-setup
@section voice-setup

Commentary:
A voice is to audio as a font is to a visual display.
A personality is to audio as a face is to a visual display.

Voice-lock-mode is a minor mode that causes your comments to be
spoken in one personality, strings in another, reserved words in another,
documentation strings in another, and so on.

Comments will be spoken in `emacspeak-voice-lock-comment-personality'.
Strings will be spoken in `emacspeak-voice-lock-string-personality'.
Function and variable names (in their defining forms) will be
 spoken in `emacspeak-voice-lock-function-name-personality'.
Reserved words will be spoken in `emacspeak-voice-lock-keyword-personality'.

To make the text you type be voiceified, use M-x voice-lock-mode.
When this minor mode is on, the voices of the current line are
updated with every insertion or deletion.

How faces map to voices: TTS engine specific modules e.g.,
dectalk-voices.el and outloud-voices.el define a standard set
of voice names.  This module maps standard "personality"
names to these pre-defined voices.  It does this via special
form def-voice-font which takes a personality name, a voice
name and a face name to set up the mapping between face and
personality, and personality and voice.
Newer Emacspeak modules should use voice-setup-add-map when
defining face->personality mappings.
Older code calls def-voice-font directly, but over time those
calls will be changed to the more succinct form provided by
voice-setup-add-map. For use from other modules, also see
function voice-setup-map-face which is useful when mapping a
single face.
Both voice-setup-add-map and voice-setup-map-face call
special form def-voice-font.

Special form def-voice-font sets up the personality name to
be available via custom.  new voices can be defined using CSS
style specifications see special form defvoice Voices defined
via defvoice can be customized via custom see the
documentation for defvoice.

Automatically generated documentation
for commands defined in module  voice-setup.

@deffn {Interactive Command} voice-setup-list-voices nil
@kbd{Not bound to any key.}

Show all defined voice-face mappings  in a help buffer.
Sample text to use comes from variable
  `voice-setup-sample-text'. 
@end deffn

@deffn {Interactive Command} voice-setup-toggle-silence-personality nil
@kbd{ control e meta q }

Toggle audibility of personality under point  .
If personality at point is currently audible, its
face->personality map is cached in a buffer local variable, and
its face->personality map is replaced by face->inaudible.  If
personality at point is inaudible, and there is a cached value,
then the original face->personality mapping is restored.  In
either case, the buffer is refontified to have the new mapping
take effect.
@end deffn

@node emacspeak-w3search
@section emacspeak-w3search

Commentary:
Site-specific websearch enhancements

Automatically generated documentation
for commands defined in module  emacspeak-w3search.

@deffn {Interactive Command} emacspeak-websearch-blue-pages nil
@kbd{Not bound to any key.}

Search IBM Blue Pages
@end deffn

@deffn {Interactive Command} emacspeak-websearch-ibm-internal nil
@kbd{Not bound to any key.}

Search IBM My News
@end deffn

@deffn {Interactive Command} emacspeak-websearch-ibm-my-news nil
@kbd{Not bound to any key.}

Search IBM My News
@end deffn

@node emacspeak-org
@section emacspeak-org

Commentary:
Speech-enable org ---
 Org allows you to keep organized notes and todo lists.
Homepage: http://www.astro.uva.nl/~dominik/Tools/org/
or http://orgmode.org/

Automatically generated documentation
for commands defined in module  emacspeak-org.

@deffn {Interactive Command} emacspeak-org-bookmark nil
@kbd{Not bound to any key.}

Bookmark from org.

(fn &optional GOTO)
@end deffn

@deffn {Interactive Command} emacspeak-org-popup-input nil
@kbd{Not bound to any key.}

Pops up an org input area.

(fn)
@end deffn

@node URL Templates 
@section  URL Templates

This section is generated automatically from the source-level documentation.
Any errors or corrections should be made to the source-level
documentation.
This section documents a total of 113 URL Templates.

All of these URL templates can be invoked via command
  @kbd{M-x emacspeak-url-template-fetch} normally bound to
  @kbd{ control e u }.
This command prompts for the name of the template, and completion
  is available via Emacs' minibuffer completion.
Each URL template carries out the following steps:
@itemize @bullet
@item Prompt for the relevant information.
@item Fetch the resulting URL using an appropriate fetcher.
@item Set up the resulting resource with appropriate
  customizations.
@end itemize

As an example, the URL templates that enable access to map directions
prompt for address and automatically
speak the relevant results.

@kbd{1Box Google}

Show 1box result from Google. Actually now shows just the results.

@kbd{Air Traffic Control}

Find live streams for Air Traffic Control.

@kbd{Airport conditions}

Display airport conditions from the FAA.

@kbd{Amazon Product Details By ASIN}

Retrieve product details from Amazon by either ISBN or ASIN.

@kbd{Anonymize Google Search}

Logout from Google to do an anonymous search.

@kbd{Archive News Search}

Search Google Archive News.

@kbd{Ask Local Search}

Ask Local Search.

@kbd{Ask Walking Directions}

Walking directions from Ask.com

@kbd{BBC  iPlayer}

BBC iPlayer

@kbd{Baseball Game Index}

Display baseball Play By Play.

@kbd{Baseball Play By Play}

Display baseball Play By Play.

@kbd{Baseball scores}

Display baseball scores.

@kbd{Baseball standings}

Display MLB standings.

@kbd{Bing News}

Bing News results as RSS feed.

@kbd{Bing Search}

Bing results as RSS feed.

@kbd{BlogSearch Google}

Google Blog Search

@kbd{CNN Content }

CNN Content

@kbd{CNN Market Data }

CNN Money

@kbd{CNN headlines }

Retrieve and speak headline news from CNN.

@kbd{CNN technology }

CNN Technology news.

@kbd{CNNContent}

Filter down to CNN  content area.

@kbd{CNNPodCasts}

List CNN Podcast media links.

@kbd{Cartoon You Said It By Laxman}

Retrieve Cartoon Times Of India.

@kbd{Dictionary Lookup}

Dictionary Lookup

@kbd{Earthquakes}

Show table of recent quakes.

@kbd{EmacsWiki Search}

EmacsWiki Search

@kbd{Finance Google Portfolio}

Download and display portfolio from Google Finance.

@kbd{Finance Google Search}

Display content from Google Finance.

@kbd{Finance Google news}

Display content from Google Finance.

@kbd{GCalendar Mobile}

Google Calendar XHTML version.

@kbd{GMail Contacts}

Open GMail Inbox

@kbd{GMail Inbox}

Open GMail Inbox

@kbd{GMail Labels}

Find messages having label from GMail. 
Make sure to sign in before invoking this template.

@kbd{GMail Mobile}

GMail Mobile XHTML version --- light-weight, fast!

@kbd{GMail Search}

Search GMail. 
Make sure to sign in before invoking this template.

@kbd{Geek Linux Daily}

Play specified edition of Geek  Linux DailyShow

@kbd{Google API Search}

Search Google APIDocs

@kbd{Google Books}

Google Books Search with text when available

@kbd{Google Feeds}

List  Google news Feeds.

@kbd{Google Glossary}

Google Glossary lookup.

@kbd{Google Hits}

Only show Google hits.

@kbd{Google Image Search}

Google Image Search

@kbd{Google Info View}

Do a Google search and get a Info view of results.

@kbd{Google Mobile Search}

Google Mobile Search

@kbd{Google News Search}

Search Google news.

@kbd{Google Print}

Google Print Search

@kbd{Google Reader}

Google Reader

@kbd{Google Recent News Search}

Search Google news.

@kbd{Google Results}

Show just results and nav bar.

@kbd{Google Scholar}

Google Scholar Search

@kbd{Google Text  News}

Retrieve and speak Google News Overview.

@kbd{Google TimeLine View}

Do a Google search and get a timeline view of results.

@kbd{Google Transcoder}

Transcode site via Google.

@kbd{Google WebQuotes}

Google WebQuotes.

@kbd{Google Webmaster Page Analysis}

Page Analysis From Google Webmaster tools.

@kbd{Google topical  News}

Display specified news feed.

@kbd{IToRSS}

Pull RSS  feed corresponding to an ITunes Podcast.

@kbd{Linux Today News}

Get news column from Linux Today.

@kbd{MDC Search}

Search MDC Wiki.

@kbd{MLB Scorecard}

Show MLB Scorecard.

@kbd{Market summary from Google}

Display financial market summary.

@kbd{Mobile BBC}

BBC Mobile Streams.

@kbd{Mobile Finance Google Search}

Display content from Google Finance.

@kbd{Money Content }

CNN Content

@kbd{Mozilla Developers Corner}

Pull specified resource from MDC.

@kbd{Multilingual dictionary via Google.}

Translate word using Google.
Source and target languages
are specified as two-letter language codes, e.g. en|de translates
from English to German

@kbd{NY Times Mobile}

NYtimes Mobile Site

@kbd{NY Times RSS Feeds}

Display browsable list of NY Times RSS Feeds.

@kbd{Official GoogleBlog Search}

Search within all official Google blogs.

@kbd{Old Time Radio}

This months Old Time Radio Programing

@kbd{On The Fly CSE}

Build a CSE on the fly and  use it to search.

@kbd{PHC Prairie Home Companion}

Play Prairie Home Companion

@kbd{Patent Search From Google}

Perform patent search via Google

@kbd{PodCast CNet}

Play Podcast from CNET

@kbd{Reader Subscription Search}

Search within feeds subscribed to in Google Reader.

@kbd{Recent BlogSearch Google}

Google Blog Search

@kbd{Recent YouTube Results}

YouTube Search Via Feeds

@kbd{Redhat Linux Show}

Play specified edition of Redhat Linux Show

@kbd{Reuters Finance}

Reuters Finance Lookup

@kbd{Seeking Alpha Stock Search}

Seeking Alpha search.

@kbd{StreamWorld Radio}

Play radio stream.
See http://www.cbsradio.com/streaming/index.html for a list of CBS  stations that use StreamTheWorld.

@kbd{Tech News From CNet}

Display tech news from CNET

@kbd{Times Of India}

Retrieve Times Of India.
Set up URL rewrite rule to get print page.

@kbd{Translation Via Google}

Translate a Web page using google. Source and target languages
are specified as two-letter language codes, e.g. en|de translates
from English to German.

@kbd{Twitter Search}

Twitter search and display results feed.

@kbd{UPS Packages}

Display package tracking information from UPS.

@kbd{Weather forecast from Weather Underground}

Weather forecast from weather underground mobile.

@kbd{WordNet Search}

Look up term in WordNet.

@kbd{Yahoo Business News}

Retrieve and speak business  section from Yahoo Daily News.

@kbd{Yahoo Content By Content ID}

Retrieve and speak news section from Yahoo Daily News.

@kbd{Yahoo DailyNews}

Retrieve and speak DailyNewspage from  Yahoo Daily News.

@kbd{Yahoo Entertainment}

Retrieve and speak Entertainment section from Yahoo Daily News.

@kbd{Yahoo Health}

Retrieve and speak Health section from Yahoo Daily News.

@kbd{Yahoo Lifestyle}

Yahoo Lifestyle News.

@kbd{Yahoo Oddly}

Retrieve and speak Oddity section from Yahoo Daily News.

@kbd{Yahoo Politics}

Retrieve and speak Politics section from Yahoo Daily News.

@kbd{Yahoo RSS Feeds}

List Yahoo RSS Feeds.

@kbd{Yahoo SF Local}

Retrieve and speak Local section from Yahoo Daily News.

@kbd{Yahoo Science}

Retrieve and speak Science section from Yahoo Daily News.

@kbd{Yahoo Sports}

Entertainment news from Yahoo.

@kbd{Yahoo Technology  News}

Yahoo Technology News.

@kbd{Yahoo Top Stories}

Retrieve and speak Top Stories  section from Yahoo Daily News.

@kbd{Yahoo World News}

Yahoo World News.

@kbd{YouTube Results}

YouTube Search Via Feeds

@kbd{ask search mobile}

Mobile search using Ask.com

@kbd{fedex packages}

Display package tracking information from Fedex.

@kbd{html5IRC}

Show HTML5 IRC log.

@kbd{rss weather from wunderground}

Pull RSS weather feed for specified state/city.

@kbd{sourceforge Download}

Download specified file.

@kbd{sourceforge browse mirrors}

Retrieve download page  at Sourceforge for specified project.

@kbd{sourceforge project}

Open specified project page at SourceForge.

@kbd{w3c IRC Logs}

Use this to pull up the
archived  logs from the W3C IRC. You need to know the exact
name of the channel.

@kbd{w3c Lists}

Use this to pull up the
archived  mail from the W3C list. You need to know the exact
name of the list.

